
inz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000bc  00800100  00001114  000011a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001114  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000021e  008001bc  008001bc  00001264  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001264  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012aa  00000000  00000000  000013a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000833  00000000  00000000  00002652  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000936  00000000  00000000  00002e85  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  000037bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052c  00000000  00000000  00003a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009d2  00000000  00000000  00003fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004996  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__vector_1>
       8:	0c 94 bc 02 	jmp	0x578	; 0x578 <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 07 03 	jmp	0x60e	; 0x60e <__vector_14>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 1a 05 	jmp	0xa34	; 0xa34 <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e1       	ldi	r30, 0x14	; 20
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 3b       	cpi	r26, 0xBC	; 188
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	23 e0       	ldi	r18, 0x03	; 3
      8c:	ac eb       	ldi	r26, 0xBC	; 188
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	aa 3d       	cpi	r26, 0xDA	; 218
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <main>
      9e:	0c 94 88 08 	jmp	0x1110	; 0x1110 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <checkButton>:
	}
	else
	{
		checkButton(&buttonPressed[pin], ' ', false);
	}
}
      a6:	fc 01       	movw	r30, r24
      a8:	44 23       	and	r20, r20
      aa:	19 f0       	breq	.+6      	; 0xb2 <checkButton+0xc>
      ac:	82 81       	ldd	r24, Z+2	; 0x02
      ae:	80 33       	cpi	r24, 0x30	; 48
      b0:	29 f0       	breq	.+10     	; 0xbc <checkButton+0x16>
      b2:	41 11       	cpse	r20, r1
      b4:	05 c0       	rjmp	.+10     	; 0xc0 <checkButton+0x1a>
      b6:	82 81       	ldd	r24, Z+2	; 0x02
      b8:	81 33       	cpi	r24, 0x31	; 49
      ba:	11 f4       	brne	.+4      	; 0xc0 <checkButton+0x1a>
      bc:	15 82       	std	Z+5, r1	; 0x05
      be:	14 82       	std	Z+4, r1	; 0x04
      c0:	44 23       	and	r20, r20
      c2:	19 f0       	breq	.+6      	; 0xca <checkButton+0x24>
      c4:	81 e3       	ldi	r24, 0x31	; 49
      c6:	82 83       	std	Z+2, r24	; 0x02
      c8:	02 c0       	rjmp	.+4      	; 0xce <checkButton+0x28>
      ca:	80 e3       	ldi	r24, 0x30	; 48
      cc:	82 83       	std	Z+2, r24	; 0x02
      ce:	84 81       	ldd	r24, Z+4	; 0x04
      d0:	95 81       	ldd	r25, Z+5	; 0x05
      d2:	00 97       	sbiw	r24, 0x00	; 0
      d4:	39 f4       	brne	.+14     	; 0xe4 <checkButton+0x3e>
      d6:	21 e0       	ldi	r18, 0x01	; 1
      d8:	23 83       	std	Z+3, r18	; 0x03
      da:	61 83       	std	Z+1, r22	; 0x01
      dc:	01 96       	adiw	r24, 0x01	; 1
      de:	95 83       	std	Z+5, r25	; 0x05
      e0:	84 83       	std	Z+4, r24	; 0x04
      e2:	08 95       	ret
      e4:	99 23       	and	r25, r25
      e6:	1c f4       	brge	.+6      	; 0xee <checkButton+0x48>
      e8:	01 96       	adiw	r24, 0x01	; 1
      ea:	95 83       	std	Z+5, r25	; 0x05
      ec:	84 83       	std	Z+4, r24	; 0x04
      ee:	08 95       	ret

000000f0 <scan_ROW1>:
      f0:	85 b1       	in	r24, 0x05	; 5
      f2:	81 60       	ori	r24, 0x01	; 1
      f4:	85 b9       	out	0x05, r24	; 5
      f6:	87 eb       	ldi	r24, 0xB7	; 183
      f8:	9b e0       	ldi	r25, 0x0B	; 11
      fa:	01 97       	sbiw	r24, 0x01	; 1
      fc:	f1 f7       	brne	.-4      	; 0xfa <scan_ROW1+0xa>
      fe:	00 c0       	rjmp	.+0      	; 0x100 <scan_ROW1+0x10>
     100:	00 00       	nop
     102:	4e 9b       	sbis	0x09, 6	; 9
     104:	07 c0       	rjmp	.+14     	; 0x114 <scan_ROW1+0x24>
     106:	41 e0       	ldi	r20, 0x01	; 1
     108:	61 e3       	ldi	r22, 0x31	; 49
     10a:	80 e0       	ldi	r24, 0x00	; 0
     10c:	91 e0       	ldi	r25, 0x01	; 1
     10e:	0e 94 53 00 	call	0xa6	; 0xa6 <checkButton>
     112:	06 c0       	rjmp	.+12     	; 0x120 <scan_ROW1+0x30>
     114:	40 e0       	ldi	r20, 0x00	; 0
     116:	60 e2       	ldi	r22, 0x20	; 32
     118:	80 e0       	ldi	r24, 0x00	; 0
     11a:	91 e0       	ldi	r25, 0x01	; 1
     11c:	0e 94 53 00 	call	0xa6	; 0xa6 <checkButton>
     120:	35 9b       	sbis	0x06, 5	; 6
     122:	07 c0       	rjmp	.+14     	; 0x132 <scan_ROW1+0x42>
     124:	41 e0       	ldi	r20, 0x01	; 1
     126:	62 e3       	ldi	r22, 0x32	; 50
     128:	86 e0       	ldi	r24, 0x06	; 6
     12a:	91 e0       	ldi	r25, 0x01	; 1
     12c:	0e 94 53 00 	call	0xa6	; 0xa6 <checkButton>
     130:	06 c0       	rjmp	.+12     	; 0x13e <scan_ROW1+0x4e>
     132:	40 e0       	ldi	r20, 0x00	; 0
     134:	60 e2       	ldi	r22, 0x20	; 32
     136:	86 e0       	ldi	r24, 0x06	; 6
     138:	91 e0       	ldi	r25, 0x01	; 1
     13a:	0e 94 53 00 	call	0xa6	; 0xa6 <checkButton>
     13e:	4f 9b       	sbis	0x09, 7	; 9
     140:	07 c0       	rjmp	.+14     	; 0x150 <scan_ROW1+0x60>
     142:	41 e0       	ldi	r20, 0x01	; 1
     144:	63 e3       	ldi	r22, 0x33	; 51
     146:	8c e0       	ldi	r24, 0x0C	; 12
     148:	91 e0       	ldi	r25, 0x01	; 1
     14a:	0e 94 53 00 	call	0xa6	; 0xa6 <checkButton>
     14e:	06 c0       	rjmp	.+12     	; 0x15c <scan_ROW1+0x6c>
     150:	40 e0       	ldi	r20, 0x00	; 0
     152:	60 e2       	ldi	r22, 0x20	; 32
     154:	8c e0       	ldi	r24, 0x0C	; 12
     156:	91 e0       	ldi	r25, 0x01	; 1
     158:	0e 94 53 00 	call	0xa6	; 0xa6 <checkButton>
     15c:	33 9b       	sbis	0x06, 3	; 6
     15e:	07 c0       	rjmp	.+14     	; 0x16e <scan_ROW1+0x7e>
     160:	41 e0       	ldi	r20, 0x01	; 1
     162:	61 e4       	ldi	r22, 0x41	; 65
     164:	82 e1       	ldi	r24, 0x12	; 18
     166:	91 e0       	ldi	r25, 0x01	; 1
     168:	0e 94 53 00 	call	0xa6	; 0xa6 <checkButton>
     16c:	06 c0       	rjmp	.+12     	; 0x17a <scan_ROW1+0x8a>
     16e:	40 e0       	ldi	r20, 0x00	; 0
     170:	60 e2       	ldi	r22, 0x20	; 32
     172:	82 e1       	ldi	r24, 0x12	; 18
     174:	91 e0       	ldi	r25, 0x01	; 1
     176:	0e 94 53 00 	call	0xa6	; 0xa6 <checkButton>
     17a:	85 b1       	in	r24, 0x05	; 5
     17c:	8e 7f       	andi	r24, 0xFE	; 254
     17e:	85 b9       	out	0x05, r24	; 5
     180:	08 95       	ret

00000182 <scan_ROW2>:
     182:	8b b1       	in	r24, 0x0b	; 11
     184:	80 61       	ori	r24, 0x10	; 16
     186:	8b b9       	out	0x0b, r24	; 11
     188:	8f e2       	ldi	r24, 0x2F	; 47
     18a:	95 e7       	ldi	r25, 0x75	; 117
     18c:	01 97       	sbiw	r24, 0x01	; 1
     18e:	f1 f7       	brne	.-4      	; 0x18c <scan_ROW2+0xa>
     190:	00 c0       	rjmp	.+0      	; 0x192 <scan_ROW2+0x10>
     192:	00 00       	nop
     194:	4e 9b       	sbis	0x09, 6	; 9
     196:	07 c0       	rjmp	.+14     	; 0x1a6 <scan_ROW2+0x24>
     198:	41 e0       	ldi	r20, 0x01	; 1
     19a:	64 e3       	ldi	r22, 0x34	; 52
     19c:	88 e1       	ldi	r24, 0x18	; 24
     19e:	91 e0       	ldi	r25, 0x01	; 1
     1a0:	0e 94 53 00 	call	0xa6	; 0xa6 <checkButton>
     1a4:	06 c0       	rjmp	.+12     	; 0x1b2 <scan_ROW2+0x30>
     1a6:	40 e0       	ldi	r20, 0x00	; 0
     1a8:	60 e2       	ldi	r22, 0x20	; 32
     1aa:	88 e1       	ldi	r24, 0x18	; 24
     1ac:	91 e0       	ldi	r25, 0x01	; 1
     1ae:	0e 94 53 00 	call	0xa6	; 0xa6 <checkButton>
     1b2:	35 9b       	sbis	0x06, 5	; 6
     1b4:	07 c0       	rjmp	.+14     	; 0x1c4 <scan_ROW2+0x42>
     1b6:	41 e0       	ldi	r20, 0x01	; 1
     1b8:	65 e3       	ldi	r22, 0x35	; 53
     1ba:	8e e1       	ldi	r24, 0x1E	; 30
     1bc:	91 e0       	ldi	r25, 0x01	; 1
     1be:	0e 94 53 00 	call	0xa6	; 0xa6 <checkButton>
     1c2:	06 c0       	rjmp	.+12     	; 0x1d0 <scan_ROW2+0x4e>
     1c4:	40 e0       	ldi	r20, 0x00	; 0
     1c6:	60 e2       	ldi	r22, 0x20	; 32
     1c8:	8e e1       	ldi	r24, 0x1E	; 30
     1ca:	91 e0       	ldi	r25, 0x01	; 1
     1cc:	0e 94 53 00 	call	0xa6	; 0xa6 <checkButton>
     1d0:	4f 9b       	sbis	0x09, 7	; 9
     1d2:	07 c0       	rjmp	.+14     	; 0x1e2 <scan_ROW2+0x60>
     1d4:	41 e0       	ldi	r20, 0x01	; 1
     1d6:	66 e3       	ldi	r22, 0x36	; 54
     1d8:	84 e2       	ldi	r24, 0x24	; 36
     1da:	91 e0       	ldi	r25, 0x01	; 1
     1dc:	0e 94 53 00 	call	0xa6	; 0xa6 <checkButton>
     1e0:	06 c0       	rjmp	.+12     	; 0x1ee <scan_ROW2+0x6c>
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	60 e2       	ldi	r22, 0x20	; 32
     1e6:	84 e2       	ldi	r24, 0x24	; 36
     1e8:	91 e0       	ldi	r25, 0x01	; 1
     1ea:	0e 94 53 00 	call	0xa6	; 0xa6 <checkButton>
     1ee:	33 9b       	sbis	0x06, 3	; 6
     1f0:	07 c0       	rjmp	.+14     	; 0x200 <scan_ROW2+0x7e>
     1f2:	41 e0       	ldi	r20, 0x01	; 1
     1f4:	62 e4       	ldi	r22, 0x42	; 66
     1f6:	8a e2       	ldi	r24, 0x2A	; 42
     1f8:	91 e0       	ldi	r25, 0x01	; 1
     1fa:	0e 94 53 00 	call	0xa6	; 0xa6 <checkButton>
     1fe:	06 c0       	rjmp	.+12     	; 0x20c <scan_ROW2+0x8a>
     200:	40 e0       	ldi	r20, 0x00	; 0
     202:	60 e2       	ldi	r22, 0x20	; 32
     204:	8a e2       	ldi	r24, 0x2A	; 42
     206:	91 e0       	ldi	r25, 0x01	; 1
     208:	0e 94 53 00 	call	0xa6	; 0xa6 <checkButton>
     20c:	8b b1       	in	r24, 0x0b	; 11
     20e:	8f 7e       	andi	r24, 0xEF	; 239
     210:	8b b9       	out	0x0b, r24	; 11
     212:	08 95       	ret

00000214 <scan_ROW3>:
     214:	88 b1       	in	r24, 0x08	; 8
     216:	80 61       	ori	r24, 0x10	; 16
     218:	88 b9       	out	0x08, r24	; 8
     21a:	87 eb       	ldi	r24, 0xB7	; 183
     21c:	9b e0       	ldi	r25, 0x0B	; 11
     21e:	01 97       	sbiw	r24, 0x01	; 1
     220:	f1 f7       	brne	.-4      	; 0x21e <scan_ROW3+0xa>
     222:	00 c0       	rjmp	.+0      	; 0x224 <scan_ROW3+0x10>
     224:	00 00       	nop
     226:	4e 9b       	sbis	0x09, 6	; 9
     228:	07 c0       	rjmp	.+14     	; 0x238 <scan_ROW3+0x24>
     22a:	41 e0       	ldi	r20, 0x01	; 1
     22c:	67 e3       	ldi	r22, 0x37	; 55
     22e:	80 e3       	ldi	r24, 0x30	; 48
     230:	91 e0       	ldi	r25, 0x01	; 1
     232:	0e 94 53 00 	call	0xa6	; 0xa6 <checkButton>
     236:	06 c0       	rjmp	.+12     	; 0x244 <scan_ROW3+0x30>
     238:	40 e0       	ldi	r20, 0x00	; 0
     23a:	60 e2       	ldi	r22, 0x20	; 32
     23c:	80 e3       	ldi	r24, 0x30	; 48
     23e:	91 e0       	ldi	r25, 0x01	; 1
     240:	0e 94 53 00 	call	0xa6	; 0xa6 <checkButton>
     244:	35 9b       	sbis	0x06, 5	; 6
     246:	07 c0       	rjmp	.+14     	; 0x256 <scan_ROW3+0x42>
     248:	41 e0       	ldi	r20, 0x01	; 1
     24a:	68 e3       	ldi	r22, 0x38	; 56
     24c:	86 e3       	ldi	r24, 0x36	; 54
     24e:	91 e0       	ldi	r25, 0x01	; 1
     250:	0e 94 53 00 	call	0xa6	; 0xa6 <checkButton>
     254:	06 c0       	rjmp	.+12     	; 0x262 <scan_ROW3+0x4e>
     256:	40 e0       	ldi	r20, 0x00	; 0
     258:	60 e2       	ldi	r22, 0x20	; 32
     25a:	86 e3       	ldi	r24, 0x36	; 54
     25c:	91 e0       	ldi	r25, 0x01	; 1
     25e:	0e 94 53 00 	call	0xa6	; 0xa6 <checkButton>
     262:	4f 9b       	sbis	0x09, 7	; 9
     264:	07 c0       	rjmp	.+14     	; 0x274 <scan_ROW3+0x60>
     266:	41 e0       	ldi	r20, 0x01	; 1
     268:	69 e3       	ldi	r22, 0x39	; 57
     26a:	8c e3       	ldi	r24, 0x3C	; 60
     26c:	91 e0       	ldi	r25, 0x01	; 1
     26e:	0e 94 53 00 	call	0xa6	; 0xa6 <checkButton>
     272:	06 c0       	rjmp	.+12     	; 0x280 <scan_ROW3+0x6c>
     274:	40 e0       	ldi	r20, 0x00	; 0
     276:	60 e2       	ldi	r22, 0x20	; 32
     278:	8c e3       	ldi	r24, 0x3C	; 60
     27a:	91 e0       	ldi	r25, 0x01	; 1
     27c:	0e 94 53 00 	call	0xa6	; 0xa6 <checkButton>
     280:	33 9b       	sbis	0x06, 3	; 6
     282:	07 c0       	rjmp	.+14     	; 0x292 <scan_ROW3+0x7e>
     284:	41 e0       	ldi	r20, 0x01	; 1
     286:	63 e4       	ldi	r22, 0x43	; 67
     288:	82 e4       	ldi	r24, 0x42	; 66
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	0e 94 53 00 	call	0xa6	; 0xa6 <checkButton>
     290:	06 c0       	rjmp	.+12     	; 0x29e <scan_ROW3+0x8a>
     292:	40 e0       	ldi	r20, 0x00	; 0
     294:	60 e2       	ldi	r22, 0x20	; 32
     296:	82 e4       	ldi	r24, 0x42	; 66
     298:	91 e0       	ldi	r25, 0x01	; 1
     29a:	0e 94 53 00 	call	0xa6	; 0xa6 <checkButton>
     29e:	88 b1       	in	r24, 0x08	; 8
     2a0:	8f 7e       	andi	r24, 0xEF	; 239
     2a2:	88 b9       	out	0x08, r24	; 8
     2a4:	08 95       	ret

000002a6 <scan_ROW4>:
     2a6:	8b b1       	in	r24, 0x0b	; 11
     2a8:	80 62       	ori	r24, 0x20	; 32
     2aa:	8b b9       	out	0x0b, r24	; 11
     2ac:	87 eb       	ldi	r24, 0xB7	; 183
     2ae:	9b e0       	ldi	r25, 0x0B	; 11
     2b0:	01 97       	sbiw	r24, 0x01	; 1
     2b2:	f1 f7       	brne	.-4      	; 0x2b0 <scan_ROW4+0xa>
     2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <scan_ROW4+0x10>
     2b6:	00 00       	nop
     2b8:	4e 9b       	sbis	0x09, 6	; 9
     2ba:	07 c0       	rjmp	.+14     	; 0x2ca <scan_ROW4+0x24>
     2bc:	41 e0       	ldi	r20, 0x01	; 1
     2be:	6a e2       	ldi	r22, 0x2A	; 42
     2c0:	88 e4       	ldi	r24, 0x48	; 72
     2c2:	91 e0       	ldi	r25, 0x01	; 1
     2c4:	0e 94 53 00 	call	0xa6	; 0xa6 <checkButton>
     2c8:	06 c0       	rjmp	.+12     	; 0x2d6 <scan_ROW4+0x30>
     2ca:	40 e0       	ldi	r20, 0x00	; 0
     2cc:	60 e2       	ldi	r22, 0x20	; 32
     2ce:	88 e4       	ldi	r24, 0x48	; 72
     2d0:	91 e0       	ldi	r25, 0x01	; 1
     2d2:	0e 94 53 00 	call	0xa6	; 0xa6 <checkButton>
     2d6:	35 9b       	sbis	0x06, 5	; 6
     2d8:	07 c0       	rjmp	.+14     	; 0x2e8 <scan_ROW4+0x42>
     2da:	41 e0       	ldi	r20, 0x01	; 1
     2dc:	60 e3       	ldi	r22, 0x30	; 48
     2de:	8e e4       	ldi	r24, 0x4E	; 78
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	0e 94 53 00 	call	0xa6	; 0xa6 <checkButton>
     2e6:	06 c0       	rjmp	.+12     	; 0x2f4 <scan_ROW4+0x4e>
     2e8:	40 e0       	ldi	r20, 0x00	; 0
     2ea:	60 e2       	ldi	r22, 0x20	; 32
     2ec:	8e e4       	ldi	r24, 0x4E	; 78
     2ee:	91 e0       	ldi	r25, 0x01	; 1
     2f0:	0e 94 53 00 	call	0xa6	; 0xa6 <checkButton>
     2f4:	4f 9b       	sbis	0x09, 7	; 9
     2f6:	07 c0       	rjmp	.+14     	; 0x306 <scan_ROW4+0x60>
     2f8:	41 e0       	ldi	r20, 0x01	; 1
     2fa:	63 e2       	ldi	r22, 0x23	; 35
     2fc:	84 e5       	ldi	r24, 0x54	; 84
     2fe:	91 e0       	ldi	r25, 0x01	; 1
     300:	0e 94 53 00 	call	0xa6	; 0xa6 <checkButton>
     304:	06 c0       	rjmp	.+12     	; 0x312 <scan_ROW4+0x6c>
     306:	40 e0       	ldi	r20, 0x00	; 0
     308:	60 e2       	ldi	r22, 0x20	; 32
     30a:	84 e5       	ldi	r24, 0x54	; 84
     30c:	91 e0       	ldi	r25, 0x01	; 1
     30e:	0e 94 53 00 	call	0xa6	; 0xa6 <checkButton>
     312:	33 9b       	sbis	0x06, 3	; 6
     314:	07 c0       	rjmp	.+14     	; 0x324 <scan_ROW4+0x7e>
     316:	41 e0       	ldi	r20, 0x01	; 1
     318:	64 e4       	ldi	r22, 0x44	; 68
     31a:	8a e5       	ldi	r24, 0x5A	; 90
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	0e 94 53 00 	call	0xa6	; 0xa6 <checkButton>
     322:	06 c0       	rjmp	.+12     	; 0x330 <scan_ROW4+0x8a>
     324:	40 e0       	ldi	r20, 0x00	; 0
     326:	60 e2       	ldi	r22, 0x20	; 32
     328:	8a e5       	ldi	r24, 0x5A	; 90
     32a:	91 e0       	ldi	r25, 0x01	; 1
     32c:	0e 94 53 00 	call	0xa6	; 0xa6 <checkButton>
     330:	8b b1       	in	r24, 0x0b	; 11
     332:	8f 7d       	andi	r24, 0xDF	; 223
     334:	8b b9       	out	0x0b, r24	; 11
     336:	08 95       	ret

00000338 <scan_encoder1>:

void scan_encoder1()
{
	if (ENCODER1_BUTTON) 
     338:	19 9b       	sbis	0x03, 1	; 3
     33a:	07 c0       	rjmp	.+14     	; 0x34a <scan_encoder1+0x12>
	{	
		checkButton( &(e1[ 0 ].b), 'Y', true );
     33c:	41 e0       	ldi	r20, 0x01	; 1
     33e:	69 e5       	ldi	r22, 0x59	; 89
     340:	80 e6       	ldi	r24, 0x60	; 96
     342:	91 e0       	ldi	r25, 0x01	; 1
     344:	0e 94 53 00 	call	0xa6	; 0xa6 <checkButton>
     348:	08 95       	ret
	}
	else
	{
		checkButton( &(e1[ 0 ].b), ' ', false );
     34a:	40 e0       	ldi	r20, 0x00	; 0
     34c:	60 e2       	ldi	r22, 0x20	; 32
     34e:	80 e6       	ldi	r24, 0x60	; 96
     350:	91 e0       	ldi	r25, 0x01	; 1
     352:	0e 94 53 00 	call	0xa6	; 0xa6 <checkButton>
     356:	08 95       	ret

00000358 <scan_encoder2>:
	return;
}

void scan_encoder2() 
{
	if (ENCODER2_BUTTON)
     358:	32 9b       	sbis	0x06, 2	; 6
     35a:	07 c0       	rjmp	.+14     	; 0x36a <scan_encoder2+0x12>
	{	
		checkButton( &(e1[ 1 ].b), 'Y', true );
     35c:	41 e0       	ldi	r20, 0x01	; 1
     35e:	69 e5       	ldi	r22, 0x59	; 89
     360:	8b e6       	ldi	r24, 0x6B	; 107
     362:	91 e0       	ldi	r25, 0x01	; 1
     364:	0e 94 53 00 	call	0xa6	; 0xa6 <checkButton>
     368:	08 95       	ret
	}
	else
	{
		checkButton( &(e1[ 1 ].b), ' ', false );
     36a:	40 e0       	ldi	r20, 0x00	; 0
     36c:	60 e2       	ldi	r22, 0x20	; 32
     36e:	8b e6       	ldi	r24, 0x6B	; 107
     370:	91 e0       	ldi	r25, 0x01	; 1
     372:	0e 94 53 00 	call	0xa6	; 0xa6 <checkButton>
     376:	08 95       	ret

00000378 <scan_pot1>:
	}
	return;
}

void scan_pot1() 
{
     378:	0f 93       	push	r16
     37a:	1f 93       	push	r17
	uint32_t  temp = 0;
	uint32_t mask = (1L << 24);
	PORTB = PORTB|(ADC_CLK);//CLK->1 
     37c:	85 b1       	in	r24, 0x05	; 5
     37e:	80 61       	ori	r24, 0x10	; 16
     380:	85 b9       	out	0x05, r24	; 5
	PORTB = PORTB&~(ADC1_CS);//CS? ->0
     382:	85 b1       	in	r24, 0x05	; 5
     384:	87 7f       	andi	r24, 0xF7	; 247
     386:	85 b9       	out	0x05, r24	; 5
		
	for(uint8_t i=0; i<24; i++)	
     388:	90 e0       	ldi	r25, 0x00	; 0
}

void scan_pot1() 
{
	uint32_t  temp = 0;
	uint32_t mask = (1L << 24);
     38a:	40 e0       	ldi	r20, 0x00	; 0
     38c:	50 e0       	ldi	r21, 0x00	; 0
     38e:	60 e0       	ldi	r22, 0x00	; 0
     390:	71 e0       	ldi	r23, 0x01	; 1
	return;
}

void scan_pot1() 
{
	uint32_t  temp = 0;
     392:	00 e0       	ldi	r16, 0x00	; 0
     394:	10 e0       	ldi	r17, 0x00	; 0
     396:	98 01       	movw	r18, r16
	uint32_t mask = (1L << 24);
	PORTB = PORTB|(ADC_CLK);//CLK->1 
	PORTB = PORTB&~(ADC1_CS);//CS? ->0
		
	for(uint8_t i=0; i<24; i++)	
     398:	11 c0       	rjmp	.+34     	; 0x3bc <scan_pot1+0x44>
	{
		PORTB = PORTB&~(ADC_CLK); //CLk->0
     39a:	85 b1       	in	r24, 0x05	; 5
     39c:	8f 7e       	andi	r24, 0xEF	; 239
     39e:	85 b9       	out	0x05, r24	; 5
		if( (PINB & (1 << PINB5)) ) 
     3a0:	1d 9b       	sbis	0x03, 5	; 3
     3a2:	04 c0       	rjmp	.+8      	; 0x3ac <scan_pot1+0x34>
		{
			temp |=  mask;
     3a4:	04 2b       	or	r16, r20
     3a6:	15 2b       	or	r17, r21
     3a8:	26 2b       	or	r18, r22
     3aa:	37 2b       	or	r19, r23
		}
		mask >>= 1;
     3ac:	76 95       	lsr	r23
     3ae:	67 95       	ror	r22
     3b0:	57 95       	ror	r21
     3b2:	47 95       	ror	r20
		PORTB = PORTB|(ADC_CLK); //CLK ->1
     3b4:	85 b1       	in	r24, 0x05	; 5
     3b6:	80 61       	ori	r24, 0x10	; 16
     3b8:	85 b9       	out	0x05, r24	; 5
	uint32_t  temp = 0;
	uint32_t mask = (1L << 24);
	PORTB = PORTB|(ADC_CLK);//CLK->1 
	PORTB = PORTB&~(ADC1_CS);//CS? ->0
		
	for(uint8_t i=0; i<24; i++)	
     3ba:	9f 5f       	subi	r25, 0xFF	; 255
     3bc:	98 31       	cpi	r25, 0x18	; 24
     3be:	68 f3       	brcs	.-38     	; 0x39a <scan_pot1+0x22>
			temp |=  mask;
		}
		mask >>= 1;
		PORTB = PORTB|(ADC_CLK); //CLK ->1
	}
	PORTB = PORTB|(ADC1_CS);// CS -> 1
     3c0:	85 b1       	in	r24, 0x05	; 5
     3c2:	88 60       	ori	r24, 0x08	; 8
     3c4:	85 b9       	out	0x05, r24	; 5
	if( temp>=MAX_POT_VALUE ) // 2^21
     3c6:	01 15       	cp	r16, r1
     3c8:	11 05       	cpc	r17, r1
     3ca:	80 e2       	ldi	r24, 0x20	; 32
     3cc:	28 07       	cpc	r18, r24
     3ce:	31 05       	cpc	r19, r1
     3d0:	70 f5       	brcc	.+92     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
	{
		return;
	}
	
	tt = temp;
     3d2:	00 93 be 01 	sts	0x01BE, r16	; 0x8001be <tt>
     3d6:	10 93 bf 01 	sts	0x01BF, r17	; 0x8001bf <tt+0x1>
     3da:	20 93 c0 01 	sts	0x01C0, r18	; 0x8001c0 <tt+0x2>
     3de:	30 93 c1 01 	sts	0x01C1, r19	; 0x8001c1 <tt+0x3>
	temp &= 0x1fffff;
     3e2:	c9 01       	movw	r24, r18
     3e4:	b8 01       	movw	r22, r16
     3e6:	8f 71       	andi	r24, 0x1F	; 31
     3e8:	99 27       	eor	r25, r25
	temp /= (MAX_POT_VALUE/NO_OF_STATES);
     3ea:	2b eb       	ldi	r18, 0xBB	; 187
     3ec:	32 e0       	ldi	r19, 0x02	; 2
     3ee:	40 e0       	ldi	r20, 0x00	; 0
     3f0:	50 e0       	ldi	r21, 0x00	; 0
     3f2:	0e 94 5f 05 	call	0xabe	; 0xabe <__udivmodsi4>
	
	pots[0].value = temp;	
     3f6:	e8 ec       	ldi	r30, 0xC8	; 200
     3f8:	f1 e0       	ldi	r31, 0x01	; 1
     3fa:	20 83       	st	Z, r18
     3fc:	31 83       	std	Z+1, r19	; 0x01
     3fe:	42 83       	std	Z+2, r20	; 0x02
     400:	53 83       	std	Z+3, r21	; 0x03
	PORTB = PORTB|(ADC1_CS);// CS -> 1
     402:	85 b1       	in	r24, 0x05	; 5
     404:	88 60       	ori	r24, 0x08	; 8
     406:	85 b9       	out	0x05, r24	; 5
	if(pots[0].value != pots[0].prevValue )
     408:	80 81       	ld	r24, Z
     40a:	91 81       	ldd	r25, Z+1	; 0x01
     40c:	a2 81       	ldd	r26, Z+2	; 0x02
     40e:	b3 81       	ldd	r27, Z+3	; 0x03
     410:	44 81       	ldd	r20, Z+4	; 0x04
     412:	55 81       	ldd	r21, Z+5	; 0x05
     414:	66 81       	ldd	r22, Z+6	; 0x06
     416:	77 81       	ldd	r23, Z+7	; 0x07
     418:	84 17       	cp	r24, r20
     41a:	95 07       	cpc	r25, r21
     41c:	a6 07       	cpc	r26, r22
     41e:	b7 07       	cpc	r27, r23
     420:	31 f0       	breq	.+12     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
	{
		pots[0].changed = true;
     422:	21 e0       	ldi	r18, 0x01	; 1
     424:	20 87       	std	Z+8, r18	; 0x08
		pots[0].prevValue = pots[0].value;
     426:	84 83       	std	Z+4, r24	; 0x04
     428:	95 83       	std	Z+5, r25	; 0x05
     42a:	a6 83       	std	Z+6, r26	; 0x06
     42c:	b7 83       	std	Z+7, r27	; 0x07
	}
}
     42e:	1f 91       	pop	r17
     430:	0f 91       	pop	r16
     432:	08 95       	ret

00000434 <scan_pot2>:

void scan_pot2()
{
     434:	0f 93       	push	r16
     436:	1f 93       	push	r17
	uint32_t  temp = 0;
	uint32_t mask = (1L << 24);
	PORTB = PORTB|(ADC_CLK);//CLK->1
     438:	85 b1       	in	r24, 0x05	; 5
     43a:	80 61       	ori	r24, 0x10	; 16
     43c:	85 b9       	out	0x05, r24	; 5
	PORTB = PORTB&~(ADC2_CS);//CS? ->0
     43e:	85 b1       	in	r24, 0x05	; 5
     440:	8b 7f       	andi	r24, 0xFB	; 251
     442:	85 b9       	out	0x05, r24	; 5
	for(uint8_t i=0; i<24; i++)
     444:	90 e0       	ldi	r25, 0x00	; 0
}

void scan_pot2()
{
	uint32_t  temp = 0;
	uint32_t mask = (1L << 24);
     446:	40 e0       	ldi	r20, 0x00	; 0
     448:	50 e0       	ldi	r21, 0x00	; 0
     44a:	60 e0       	ldi	r22, 0x00	; 0
     44c:	71 e0       	ldi	r23, 0x01	; 1
	}
}

void scan_pot2()
{
	uint32_t  temp = 0;
     44e:	00 e0       	ldi	r16, 0x00	; 0
     450:	10 e0       	ldi	r17, 0x00	; 0
     452:	98 01       	movw	r18, r16
	uint32_t mask = (1L << 24);
	PORTB = PORTB|(ADC_CLK);//CLK->1
	PORTB = PORTB&~(ADC2_CS);//CS? ->0
	for(uint8_t i=0; i<24; i++)
     454:	11 c0       	rjmp	.+34     	; 0x478 <scan_pot2+0x44>
	{
		PORTB = PORTB&~(ADC_CLK); //CLk->0
     456:	85 b1       	in	r24, 0x05	; 5
     458:	8f 7e       	andi	r24, 0xEF	; 239
     45a:	85 b9       	out	0x05, r24	; 5
		if ((PINB & (1 << PINB5))) 
     45c:	1d 9b       	sbis	0x03, 5	; 3
     45e:	04 c0       	rjmp	.+8      	; 0x468 <scan_pot2+0x34>
		{
			temp |=  mask;
     460:	04 2b       	or	r16, r20
     462:	15 2b       	or	r17, r21
     464:	26 2b       	or	r18, r22
     466:	37 2b       	or	r19, r23
		}
		mask >>= 1;
     468:	76 95       	lsr	r23
     46a:	67 95       	ror	r22
     46c:	57 95       	ror	r21
     46e:	47 95       	ror	r20
		PORTB = PORTB|(ADC_CLK); //CLK ->1
     470:	85 b1       	in	r24, 0x05	; 5
     472:	80 61       	ori	r24, 0x10	; 16
     474:	85 b9       	out	0x05, r24	; 5
{
	uint32_t  temp = 0;
	uint32_t mask = (1L << 24);
	PORTB = PORTB|(ADC_CLK);//CLK->1
	PORTB = PORTB&~(ADC2_CS);//CS? ->0
	for(uint8_t i=0; i<24; i++)
     476:	9f 5f       	subi	r25, 0xFF	; 255
     478:	98 31       	cpi	r25, 0x18	; 24
     47a:	68 f3       	brcs	.-38     	; 0x456 <scan_pot2+0x22>
			temp |=  mask;
		}
		mask >>= 1;
		PORTB = PORTB|(ADC_CLK); //CLK ->1
	}
	PORTB = PORTB|(ADC2_CS);// CS -> 1
     47c:	85 b1       	in	r24, 0x05	; 5
     47e:	84 60       	ori	r24, 0x04	; 4
     480:	85 b9       	out	0x05, r24	; 5
	if( temp>=MAX_POT_VALUE ) // 2^21
     482:	01 15       	cp	r16, r1
     484:	11 05       	cpc	r17, r1
     486:	80 e2       	ldi	r24, 0x20	; 32
     488:	28 07       	cpc	r18, r24
     48a:	31 05       	cpc	r19, r1
     48c:	38 f5       	brcc	.+78     	; 0x4dc <scan_pot2+0xa8>
	{
		return;
	}
	tt = temp;
     48e:	00 93 be 01 	sts	0x01BE, r16	; 0x8001be <tt>
     492:	10 93 bf 01 	sts	0x01BF, r17	; 0x8001bf <tt+0x1>
     496:	20 93 c0 01 	sts	0x01C0, r18	; 0x8001c0 <tt+0x2>
     49a:	30 93 c1 01 	sts	0x01C1, r19	; 0x8001c1 <tt+0x3>
	temp &= 0x1fffff;
     49e:	c9 01       	movw	r24, r18
     4a0:	b8 01       	movw	r22, r16
     4a2:	8f 71       	andi	r24, 0x1F	; 31
     4a4:	99 27       	eor	r25, r25
	temp /= (MAX_POT_VALUE/NO_OF_STATES);
     4a6:	2b eb       	ldi	r18, 0xBB	; 187
     4a8:	32 e0       	ldi	r19, 0x02	; 2
     4aa:	40 e0       	ldi	r20, 0x00	; 0
     4ac:	50 e0       	ldi	r21, 0x00	; 0
     4ae:	0e 94 5f 05 	call	0xabe	; 0xabe <__udivmodsi4>
	
	pots[1].value = temp;
     4b2:	e8 ec       	ldi	r30, 0xC8	; 200
     4b4:	f1 e0       	ldi	r31, 0x01	; 1
     4b6:	21 87       	std	Z+9, r18	; 0x09
     4b8:	32 87       	std	Z+10, r19	; 0x0a
     4ba:	43 87       	std	Z+11, r20	; 0x0b
     4bc:	54 87       	std	Z+12, r21	; 0x0c
	if(pots[1].value != pots[1].prevValue )
     4be:	85 85       	ldd	r24, Z+13	; 0x0d
     4c0:	96 85       	ldd	r25, Z+14	; 0x0e
     4c2:	a7 85       	ldd	r26, Z+15	; 0x0f
     4c4:	b0 89       	ldd	r27, Z+16	; 0x10
     4c6:	28 17       	cp	r18, r24
     4c8:	39 07       	cpc	r19, r25
     4ca:	4a 07       	cpc	r20, r26
     4cc:	5b 07       	cpc	r21, r27
     4ce:	31 f0       	breq	.+12     	; 0x4dc <scan_pot2+0xa8>
	{
		pots[1].changed = true;
     4d0:	81 e0       	ldi	r24, 0x01	; 1
     4d2:	81 8b       	std	Z+17, r24	; 0x11
		pots[1].prevValue = pots[1].value;
     4d4:	25 87       	std	Z+13, r18	; 0x0d
     4d6:	36 87       	std	Z+14, r19	; 0x0e
     4d8:	47 87       	std	Z+15, r20	; 0x0f
     4da:	50 8b       	std	Z+16, r21	; 0x10
	}
}
     4dc:	1f 91       	pop	r17
     4de:	0f 91       	pop	r16
     4e0:	08 95       	ret

000004e2 <__vector_1>:

ISR(INT0_vect) 
{
     4e2:	1f 92       	push	r1
     4e4:	0f 92       	push	r0
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	0f 92       	push	r0
     4ea:	11 24       	eor	r1, r1
     4ec:	2f 93       	push	r18
     4ee:	8f 93       	push	r24
     4f0:	9f 93       	push	r25
     4f2:	af 93       	push	r26
     4f4:	bf 93       	push	r27
     4f6:	ef 93       	push	r30
     4f8:	ff 93       	push	r31
	if(!(PINC & (1 << PINC0))) 
     4fa:	30 99       	sbic	0x06, 0	; 6
     4fc:	18 c0       	rjmp	.+48     	; 0x52e <__vector_1+0x4c>
	{
		if(e1[0].counter>MIN_ENCODER_VALUE)
     4fe:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <e1+0x6>
     502:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <e1+0x7>
     506:	a0 91 68 01 	lds	r26, 0x0168	; 0x800168 <e1+0x8>
     50a:	b0 91 69 01 	lds	r27, 0x0169	; 0x800169 <e1+0x9>
     50e:	00 97       	sbiw	r24, 0x00	; 0
     510:	a1 05       	cpc	r26, r1
     512:	b1 05       	cpc	r27, r1
     514:	29 f1       	breq	.+74     	; 0x560 <__vector_1+0x7e>
		{
			e1[0].counter--;
     516:	e0 e6       	ldi	r30, 0x60	; 96
     518:	f1 e0       	ldi	r31, 0x01	; 1
     51a:	01 97       	sbiw	r24, 0x01	; 1
     51c:	a1 09       	sbc	r26, r1
     51e:	b1 09       	sbc	r27, r1
     520:	86 83       	std	Z+6, r24	; 0x06
     522:	97 83       	std	Z+7, r25	; 0x07
     524:	a0 87       	std	Z+8, r26	; 0x08
     526:	b1 87       	std	Z+9, r27	; 0x09
			e1[0].changed = true;
     528:	81 e0       	ldi	r24, 0x01	; 1
     52a:	82 87       	std	Z+10, r24	; 0x0a
     52c:	19 c0       	rjmp	.+50     	; 0x560 <__vector_1+0x7e>
		}
	}
	else 
	{
		if(e1[0].counter<MAX_ENCODER_VALUE)
     52e:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <e1+0x6>
     532:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <e1+0x7>
     536:	a0 91 68 01 	lds	r26, 0x0168	; 0x800168 <e1+0x8>
     53a:	b0 91 69 01 	lds	r27, 0x0169	; 0x800169 <e1+0x9>
     53e:	88 3e       	cpi	r24, 0xE8	; 232
     540:	23 e0       	ldi	r18, 0x03	; 3
     542:	92 07       	cpc	r25, r18
     544:	a1 05       	cpc	r26, r1
     546:	b1 05       	cpc	r27, r1
     548:	58 f4       	brcc	.+22     	; 0x560 <__vector_1+0x7e>
		{
			e1[0].counter++;
     54a:	e0 e6       	ldi	r30, 0x60	; 96
     54c:	f1 e0       	ldi	r31, 0x01	; 1
     54e:	01 96       	adiw	r24, 0x01	; 1
     550:	a1 1d       	adc	r26, r1
     552:	b1 1d       	adc	r27, r1
     554:	86 83       	std	Z+6, r24	; 0x06
     556:	97 83       	std	Z+7, r25	; 0x07
     558:	a0 87       	std	Z+8, r26	; 0x08
     55a:	b1 87       	std	Z+9, r27	; 0x09
			e1[0].changed = true;
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	82 87       	std	Z+10, r24	; 0x0a
		}
	}
}
     560:	ff 91       	pop	r31
     562:	ef 91       	pop	r30
     564:	bf 91       	pop	r27
     566:	af 91       	pop	r26
     568:	9f 91       	pop	r25
     56a:	8f 91       	pop	r24
     56c:	2f 91       	pop	r18
     56e:	0f 90       	pop	r0
     570:	0f be       	out	0x3f, r0	; 63
     572:	0f 90       	pop	r0
     574:	1f 90       	pop	r1
     576:	18 95       	reti

00000578 <__vector_2>:

ISR(INT1_vect) 
{
     578:	1f 92       	push	r1
     57a:	0f 92       	push	r0
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	0f 92       	push	r0
     580:	11 24       	eor	r1, r1
     582:	2f 93       	push	r18
     584:	8f 93       	push	r24
     586:	9f 93       	push	r25
     588:	af 93       	push	r26
     58a:	bf 93       	push	r27
     58c:	ef 93       	push	r30
     58e:	ff 93       	push	r31
	if(!(PINC & (1 << PINC1)))
     590:	31 99       	sbic	0x06, 1	; 6
     592:	18 c0       	rjmp	.+48     	; 0x5c4 <__vector_2+0x4c>
	{
		if(e1[1].counter>MIN_ENCODER_VALUE)
     594:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <e1+0x11>
     598:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <e1+0x12>
     59c:	a0 91 73 01 	lds	r26, 0x0173	; 0x800173 <e1+0x13>
     5a0:	b0 91 74 01 	lds	r27, 0x0174	; 0x800174 <e1+0x14>
     5a4:	00 97       	sbiw	r24, 0x00	; 0
     5a6:	a1 05       	cpc	r26, r1
     5a8:	b1 05       	cpc	r27, r1
     5aa:	29 f1       	breq	.+74     	; 0x5f6 <__vector_2+0x7e>
		{
			e1[1].counter--;
     5ac:	e0 e6       	ldi	r30, 0x60	; 96
     5ae:	f1 e0       	ldi	r31, 0x01	; 1
     5b0:	01 97       	sbiw	r24, 0x01	; 1
     5b2:	a1 09       	sbc	r26, r1
     5b4:	b1 09       	sbc	r27, r1
     5b6:	81 8b       	std	Z+17, r24	; 0x11
     5b8:	92 8b       	std	Z+18, r25	; 0x12
     5ba:	a3 8b       	std	Z+19, r26	; 0x13
     5bc:	b4 8b       	std	Z+20, r27	; 0x14
			e1[1].changed = true;
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	85 8b       	std	Z+21, r24	; 0x15
     5c2:	19 c0       	rjmp	.+50     	; 0x5f6 <__vector_2+0x7e>
		}
	}
	else
	{
		if(e1[1].counter<MAX_ENCODER_VALUE)
     5c4:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <e1+0x11>
     5c8:	90 91 72 01 	lds	r25, 0x0172	; 0x800172 <e1+0x12>
     5cc:	a0 91 73 01 	lds	r26, 0x0173	; 0x800173 <e1+0x13>
     5d0:	b0 91 74 01 	lds	r27, 0x0174	; 0x800174 <e1+0x14>
     5d4:	88 3e       	cpi	r24, 0xE8	; 232
     5d6:	23 e0       	ldi	r18, 0x03	; 3
     5d8:	92 07       	cpc	r25, r18
     5da:	a1 05       	cpc	r26, r1
     5dc:	b1 05       	cpc	r27, r1
     5de:	58 f4       	brcc	.+22     	; 0x5f6 <__vector_2+0x7e>
		{
			e1[1].counter++;
     5e0:	e0 e6       	ldi	r30, 0x60	; 96
     5e2:	f1 e0       	ldi	r31, 0x01	; 1
     5e4:	01 96       	adiw	r24, 0x01	; 1
     5e6:	a1 1d       	adc	r26, r1
     5e8:	b1 1d       	adc	r27, r1
     5ea:	81 8b       	std	Z+17, r24	; 0x11
     5ec:	92 8b       	std	Z+18, r25	; 0x12
     5ee:	a3 8b       	std	Z+19, r26	; 0x13
     5f0:	b4 8b       	std	Z+20, r27	; 0x14
			e1[1].changed = true;
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	85 8b       	std	Z+21, r24	; 0x15
		}
	}
}
     5f6:	ff 91       	pop	r31
     5f8:	ef 91       	pop	r30
     5fa:	bf 91       	pop	r27
     5fc:	af 91       	pop	r26
     5fe:	9f 91       	pop	r25
     600:	8f 91       	pop	r24
     602:	2f 91       	pop	r18
     604:	0f 90       	pop	r0
     606:	0f be       	out	0x3f, r0	; 63
     608:	0f 90       	pop	r0
     60a:	1f 90       	pop	r1
     60c:	18 95       	reti

0000060e <__vector_14>:

ISR(TIMER0_COMPA_vect) 
{
     60e:	1f 92       	push	r1
     610:	0f 92       	push	r0
     612:	0f b6       	in	r0, 0x3f	; 63
     614:	0f 92       	push	r0
     616:	11 24       	eor	r1, r1
     618:	2f 93       	push	r18
     61a:	3f 93       	push	r19
     61c:	4f 93       	push	r20
     61e:	5f 93       	push	r21
     620:	6f 93       	push	r22
     622:	7f 93       	push	r23
     624:	8f 93       	push	r24
     626:	9f 93       	push	r25
     628:	af 93       	push	r26
     62a:	bf 93       	push	r27
	tics++;
     62c:	40 91 c6 01 	lds	r20, 0x01C6	; 0x8001c6 <tics>
     630:	50 91 c7 01 	lds	r21, 0x01C7	; 0x8001c7 <tics+0x1>
     634:	4f 5f       	subi	r20, 0xFF	; 255
     636:	5f 4f       	sbci	r21, 0xFF	; 255
     638:	50 93 c7 01 	sts	0x01C7, r21	; 0x8001c7 <tics+0x1>
     63c:	40 93 c6 01 	sts	0x01C6, r20	; 0x8001c6 <tics>
	
	if(tics%100==0)  // flag 1
     640:	9a 01       	movw	r18, r20
     642:	36 95       	lsr	r19
     644:	27 95       	ror	r18
     646:	36 95       	lsr	r19
     648:	27 95       	ror	r18
     64a:	ab e7       	ldi	r26, 0x7B	; 123
     64c:	b4 e1       	ldi	r27, 0x14	; 20
     64e:	0e 94 81 05 	call	0xb02	; 0xb02 <__umulhisi3>
     652:	96 95       	lsr	r25
     654:	87 95       	ror	r24
     656:	64 e6       	ldi	r22, 0x64	; 100
     658:	68 9f       	mul	r22, r24
     65a:	90 01       	movw	r18, r0
     65c:	69 9f       	mul	r22, r25
     65e:	30 0d       	add	r19, r0
     660:	11 24       	eor	r1, r1
     662:	ca 01       	movw	r24, r20
     664:	82 1b       	sub	r24, r18
     666:	93 0b       	sbc	r25, r19
     668:	51 f4       	brne	.+20     	; 0x67e <__vector_14+0x70>
	{
		programState |= PS_START_CONV;
     66a:	20 91 bc 01 	lds	r18, 0x01BC	; 0x8001bc <__data_end>
     66e:	30 91 bd 01 	lds	r19, 0x01BD	; 0x8001bd <__data_end+0x1>
     672:	21 60       	ori	r18, 0x01	; 1
     674:	30 93 bd 01 	sts	0x01BD, r19	; 0x8001bd <__data_end+0x1>
     678:	20 93 bc 01 	sts	0x01BC, r18	; 0x8001bc <__data_end>
     67c:	19 c0       	rjmp	.+50     	; 0x6b0 <__vector_14+0xa2>
	}
	else if(tics%100==82) // flag 2
     67e:	82 35       	cpi	r24, 0x52	; 82
     680:	91 05       	cpc	r25, r1
     682:	51 f4       	brne	.+20     	; 0x698 <__vector_14+0x8a>
	{
		programState |= PS_SCAN_POT_1;
     684:	20 91 bc 01 	lds	r18, 0x01BC	; 0x8001bc <__data_end>
     688:	30 91 bd 01 	lds	r19, 0x01BD	; 0x8001bd <__data_end+0x1>
     68c:	22 60       	ori	r18, 0x02	; 2
     68e:	30 93 bd 01 	sts	0x01BD, r19	; 0x8001bd <__data_end+0x1>
     692:	20 93 bc 01 	sts	0x01BC, r18	; 0x8001bc <__data_end>
     696:	0c c0       	rjmp	.+24     	; 0x6b0 <__vector_14+0xa2>
	}
	else if(tics%100==84) // flag 3
     698:	84 35       	cpi	r24, 0x54	; 84
     69a:	91 05       	cpc	r25, r1
     69c:	49 f4       	brne	.+18     	; 0x6b0 <__vector_14+0xa2>
	{
		programState |= PS_SCAN_POT_2;
     69e:	20 91 bc 01 	lds	r18, 0x01BC	; 0x8001bc <__data_end>
     6a2:	30 91 bd 01 	lds	r19, 0x01BD	; 0x8001bd <__data_end+0x1>
     6a6:	24 60       	ori	r18, 0x04	; 4
     6a8:	30 93 bd 01 	sts	0x01BD, r19	; 0x8001bd <__data_end+0x1>
     6ac:	20 93 bc 01 	sts	0x01BC, r18	; 0x8001bc <__data_end>
	}
	
	if(tics%100==90) // flag 4
     6b0:	8a 35       	cpi	r24, 0x5A	; 90
     6b2:	91 05       	cpc	r25, r1
     6b4:	49 f4       	brne	.+18     	; 0x6c8 <__vector_14+0xba>
	{
		programState |= PS_SCAN_POTS;
     6b6:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <__data_end>
     6ba:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <__data_end+0x1>
     6be:	88 60       	ori	r24, 0x08	; 8
     6c0:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <__data_end+0x1>
     6c4:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <__data_end>
	}
}
     6c8:	bf 91       	pop	r27
     6ca:	af 91       	pop	r26
     6cc:	9f 91       	pop	r25
     6ce:	8f 91       	pop	r24
     6d0:	7f 91       	pop	r23
     6d2:	6f 91       	pop	r22
     6d4:	5f 91       	pop	r21
     6d6:	4f 91       	pop	r20
     6d8:	3f 91       	pop	r19
     6da:	2f 91       	pop	r18
     6dc:	0f 90       	pop	r0
     6de:	0f be       	out	0x3f, r0	; 63
     6e0:	0f 90       	pop	r0
     6e2:	1f 90       	pop	r1
     6e4:	18 95       	reti

000006e6 <appendSerial>:

void appendSerial(char c) 
{
	buffer[serialWritePos] = c;
     6e6:	20 91 c2 01 	lds	r18, 0x01C2	; 0x8001c2 <serialWritePos>
     6ea:	30 91 c3 01 	lds	r19, 0x01C3	; 0x8001c3 <serialWritePos+0x1>
     6ee:	f9 01       	movw	r30, r18
     6f0:	e6 52       	subi	r30, 0x26	; 38
     6f2:	fd 4f       	sbci	r31, 0xFD	; 253
     6f4:	80 83       	st	Z, r24
	serialWritePos++;
     6f6:	2f 5f       	subi	r18, 0xFF	; 255
     6f8:	3f 4f       	sbci	r19, 0xFF	; 255
     6fa:	30 93 c3 01 	sts	0x01C3, r19	; 0x8001c3 <serialWritePos+0x1>
     6fe:	20 93 c2 01 	sts	0x01C2, r18	; 0x8001c2 <serialWritePos>
	
	if(serialWritePos >= DATA_SIZE) 
     702:	2f 3f       	cpi	r18, 0xFF	; 255
     704:	31 05       	cpc	r19, r1
     706:	29 f0       	breq	.+10     	; 0x712 <appendSerial+0x2c>
     708:	20 f0       	brcs	.+8      	; 0x712 <appendSerial+0x2c>
	{
		serialWritePos = 0;
     70a:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <serialWritePos+0x1>
     70e:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <serialWritePos>
     712:	08 95       	ret

00000714 <serialWrite>:
	}
}

void serialWrite (char c[]) 
{
     714:	0f 93       	push	r16
     716:	1f 93       	push	r17
     718:	cf 93       	push	r28
     71a:	df 93       	push	r29
     71c:	8c 01       	movw	r16, r24
	for (uint16_t i=0; i<strlen(c); i++) 
     71e:	c0 e0       	ldi	r28, 0x00	; 0
     720:	d0 e0       	ldi	r29, 0x00	; 0
     722:	07 c0       	rjmp	.+14     	; 0x732 <serialWrite+0x1e>
	{
		appendSerial(c[i]);
     724:	f8 01       	movw	r30, r16
     726:	ec 0f       	add	r30, r28
     728:	fd 1f       	adc	r31, r29
     72a:	80 81       	ld	r24, Z
     72c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <appendSerial>
	}
}

void serialWrite (char c[]) 
{
	for (uint16_t i=0; i<strlen(c); i++) 
     730:	21 96       	adiw	r28, 0x01	; 1
     732:	f8 01       	movw	r30, r16
     734:	01 90       	ld	r0, Z+
     736:	00 20       	and	r0, r0
     738:	e9 f7       	brne	.-6      	; 0x734 <serialWrite+0x20>
     73a:	31 97       	sbiw	r30, 0x01	; 1
     73c:	e0 1b       	sub	r30, r16
     73e:	f1 0b       	sbc	r31, r17
     740:	ce 17       	cp	r28, r30
     742:	df 07       	cpc	r29, r31
     744:	78 f3       	brcs	.-34     	; 0x724 <serialWrite+0x10>
	{
		appendSerial(c[i]);
	}
	UCSR0B |= (1 << UDRIE0);
     746:	e1 ec       	ldi	r30, 0xC1	; 193
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	80 81       	ld	r24, Z
     74c:	80 62       	ori	r24, 0x20	; 32
     74e:	80 83       	st	Z, r24
}
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	1f 91       	pop	r17
     756:	0f 91       	pop	r16
     758:	08 95       	ret

0000075a <scanPots>:
		}
	}
}

void scanPots()
{
     75a:	1f 93       	push	r17
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
	for(uint8_t k=0; k< NO_OF_POTS;  k++)
     760:	10 e0       	ldi	r17, 0x00	; 0
     762:	42 c0       	rjmp	.+132    	; 0x7e8 <scanPots+0x8e>
	{
		if(pots[k].changed)
     764:	81 2f       	mov	r24, r17
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	fc 01       	movw	r30, r24
     76a:	ee 0f       	add	r30, r30
     76c:	ff 1f       	adc	r31, r31
     76e:	ee 0f       	add	r30, r30
     770:	ff 1f       	adc	r31, r31
     772:	ee 0f       	add	r30, r30
     774:	ff 1f       	adc	r31, r31
     776:	e8 0f       	add	r30, r24
     778:	f9 1f       	adc	r31, r25
     77a:	e8 53       	subi	r30, 0x38	; 56
     77c:	fe 4f       	sbci	r31, 0xFE	; 254
     77e:	20 85       	ldd	r18, Z+8	; 0x08
     780:	22 23       	and	r18, r18
     782:	89 f1       	breq	.+98     	; 0x7e6 <scanPots+0x8c>
		{
			snprintf(dane, DATA_SIZE, "<POT%d:%06ld tt:%06ld>\r\n", k, pots[k].value, tt );
     784:	20 91 c1 01 	lds	r18, 0x01C1	; 0x8001c1 <tt+0x3>
     788:	2f 93       	push	r18
     78a:	20 91 c0 01 	lds	r18, 0x01C0	; 0x8001c0 <tt+0x2>
     78e:	2f 93       	push	r18
     790:	20 91 bf 01 	lds	r18, 0x01BF	; 0x8001bf <tt+0x1>
     794:	2f 93       	push	r18
     796:	20 91 be 01 	lds	r18, 0x01BE	; 0x8001be <tt>
     79a:	2f 93       	push	r18
     79c:	ef 01       	movw	r28, r30
     79e:	83 81       	ldd	r24, Z+3	; 0x03
     7a0:	8f 93       	push	r24
     7a2:	82 81       	ldd	r24, Z+2	; 0x02
     7a4:	8f 93       	push	r24
     7a6:	81 81       	ldd	r24, Z+1	; 0x01
     7a8:	8f 93       	push	r24
     7aa:	80 81       	ld	r24, Z
     7ac:	8f 93       	push	r24
     7ae:	1f 92       	push	r1
     7b0:	1f 93       	push	r17
     7b2:	86 e7       	ldi	r24, 0x76	; 118
     7b4:	91 e0       	ldi	r25, 0x01	; 1
     7b6:	9f 93       	push	r25
     7b8:	8f 93       	push	r24
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	8f 93       	push	r24
     7be:	1f 92       	push	r1
     7c0:	8a ed       	ldi	r24, 0xDA	; 218
     7c2:	91 e0       	ldi	r25, 0x01	; 1
     7c4:	9f 93       	push	r25
     7c6:	8f 93       	push	r24
     7c8:	0e 94 90 05 	call	0xb20	; 0xb20 <snprintf>
			serialWrite(dane);
     7cc:	8a ed       	ldi	r24, 0xDA	; 218
     7ce:	91 e0       	ldi	r25, 0x01	; 1
     7d0:	0e 94 8a 03 	call	0x714	; 0x714 <serialWrite>
			pots[k].changed = false;
     7d4:	18 86       	std	Y+8, r1	; 0x08
     7d6:	8d b7       	in	r24, 0x3d	; 61
     7d8:	9e b7       	in	r25, 0x3e	; 62
     7da:	40 96       	adiw	r24, 0x10	; 16
     7dc:	0f b6       	in	r0, 0x3f	; 63
     7de:	f8 94       	cli
     7e0:	9e bf       	out	0x3e, r25	; 62
     7e2:	0f be       	out	0x3f, r0	; 63
     7e4:	8d bf       	out	0x3d, r24	; 61
	}
}

void scanPots()
{
	for(uint8_t k=0; k< NO_OF_POTS;  k++)
     7e6:	1f 5f       	subi	r17, 0xFF	; 255
     7e8:	12 30       	cpi	r17, 0x02	; 2
     7ea:	08 f4       	brcc	.+2      	; 0x7ee <scanPots+0x94>
     7ec:	bb cf       	rjmp	.-138    	; 0x764 <scanPots+0xa>
			snprintf(dane, DATA_SIZE, "<POT%d:%06ld tt:%06ld>\r\n", k, pots[k].value, tt );
			serialWrite(dane);
			pots[k].changed = false;
		}
	}
}
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	1f 91       	pop	r17
     7f4:	08 95       	ret

000007f6 <main>:
void checkColumn(char port[], uint8_t pin, struct button *b);
	
int main(void)
{
	//assigning masks to direction registers
	DDRD = KB_PD_MASK;
     7f6:	80 e3       	ldi	r24, 0x30	; 48
     7f8:	8a b9       	out	0x0a, r24	; 10
	DDRB = KB_PB_MASK | ADC1_CS | ADC2_CS | ADC_CLK;
     7fa:	8d e1       	ldi	r24, 0x1D	; 29
     7fc:	84 b9       	out	0x04, r24	; 4
	DDRC = KB_PC_MASK;
     7fe:	80 e1       	ldi	r24, 0x10	; 16
     800:	87 b9       	out	0x07, r24	; 7
	sei(); //turning on global interrupts
     802:	78 94       	sei
	UBRR0H = (uint8_t)(BRC/256); //UPPER BAUD BIT REGISTER
     804:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (uint8_t)(BRC%256); //LOWER BAUD BIT REGISTER
     808:	9c e0       	ldi	r25, 0x0C	; 12
     80a:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	
   //setting up transmitter
	UCSR0A = (1<< UDRE0);
     80e:	80 e2       	ldi	r24, 0x20	; 32
     810:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = (1<< TXEN0); //TRANSMITTER ENABLE
     814:	88 e0       	ldi	r24, 0x08	; 8
     816:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<< UCSZ01) | (1<< UCSZ00); //CONTROL REGISTER  
     81a:	86 e0       	ldi	r24, 0x06	; 6
     81c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
   
	EICRA = 0x0a; //interrupt control register both INT0 and INT1 triggers at falling edge
     820:	8a e0       	ldi	r24, 0x0A	; 10
     822:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
 
	EIMSK = 0x03; //external interrupt mask register turning on both INT0 and INT1
     826:	83 e0       	ldi	r24, 0x03	; 3
     828:	8d bb       	out	0x1d, r24	; 29
	
	TCCR0A = (1 << WGM01); //set CTC bit
     82a:	82 e0       	ldi	r24, 0x02	; 2
     82c:	84 bd       	out	0x24, r24	; 36
	OCR0A = 12; //setting timer constant
     82e:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = (1 << OCIE0A); //timer enable
     830:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	TCCR0B = (1 << CS02) | (1 << CS00); //prescalar at 1024
     834:	85 e0       	ldi	r24, 0x05	; 5
     836:	85 bd       	out	0x25, r24	; 37
  
	PORTB = ADC1_CS | ADC2_CS | ADC_CLK;
     838:	8c e1       	ldi	r24, 0x1C	; 28
     83a:	85 b9       	out	0x05, r24	; 5

	serialWrite("Reset\n");
     83c:	8f e8       	ldi	r24, 0x8F	; 143
     83e:	91 e0       	ldi	r25, 0x01	; 1
     840:	0e 94 8a 03 	call	0x714	; 0x714 <serialWrite>
  
    while (1) 
    {
		if(programState & PS_START_CONV )  // 1 flag
     844:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <__data_end>
     848:	80 ff       	sbrs	r24, 0
     84a:	16 c0       	rjmp	.+44     	; 0x878 <__DATA_REGION_LENGTH__+0x78>
		{
			PORTB |= ADC_CLK;//CLK->1
     84c:	85 b1       	in	r24, 0x05	; 5
     84e:	80 61       	ori	r24, 0x10	; 16
     850:	85 b9       	out	0x05, r24	; 5
			PORTB &= ~(ADC1_CS | ADC2_CS);//CS? ->0
     852:	85 b1       	in	r24, 0x05	; 5
     854:	83 7f       	andi	r24, 0xF3	; 243
     856:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     858:	88 e2       	ldi	r24, 0x28	; 40
     85a:	8a 95       	dec	r24
     85c:	f1 f7       	brne	.-4      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
			_delay_us(10);
			PORTB |= (ADC1_CS | ADC2_CS);//CS? ->1
     85e:	85 b1       	in	r24, 0x05	; 5
     860:	8c 60       	ori	r24, 0x0C	; 12
     862:	85 b9       	out	0x05, r24	; 5
			programState &= ~PS_START_CONV;
     864:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <__data_end>
     868:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <__data_end+0x1>
     86c:	8e 7f       	andi	r24, 0xFE	; 254
     86e:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <__data_end+0x1>
     872:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <__data_end>
     876:	1b c0       	rjmp	.+54     	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
		}
		else if(programState & PS_SCAN_POT_1) // flag 2
     878:	81 ff       	sbrs	r24, 1
     87a:	0c c0       	rjmp	.+24     	; 0x894 <__DATA_REGION_LENGTH__+0x94>
		{
			scan_pot1(); 
     87c:	0e 94 bc 01 	call	0x378	; 0x378 <scan_pot1>
			programState &= ~PS_SCAN_POT_1;
     880:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <__data_end>
     884:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <__data_end+0x1>
     888:	8d 7f       	andi	r24, 0xFD	; 253
     88a:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <__data_end+0x1>
     88e:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <__data_end>
     892:	0d c0       	rjmp	.+26     	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
		}
		else if(programState & PS_SCAN_POT_2) // flag 3
     894:	82 ff       	sbrs	r24, 2
     896:	0b c0       	rjmp	.+22     	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
		{
			scan_pot2();
     898:	0e 94 1a 02 	call	0x434	; 0x434 <scan_pot2>
			programState &= ~PS_SCAN_POT_2;
     89c:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <__data_end>
     8a0:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <__data_end+0x1>
     8a4:	8b 7f       	andi	r24, 0xFB	; 251
     8a6:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <__data_end+0x1>
     8aa:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <__data_end>
		}
		if(programState & PS_SCAN_POTS)
     8ae:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <__data_end>
     8b2:	83 ff       	sbrs	r24, 3
     8b4:	0b c0       	rjmp	.+22     	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
		{
			scanPots();
     8b6:	0e 94 ad 03 	call	0x75a	; 0x75a <scanPots>
			programState &= ~PS_SCAN_POTS;
     8ba:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <__data_end>
     8be:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <__data_end+0x1>
     8c2:	87 7f       	andi	r24, 0xF7	; 247
     8c4:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <__data_end+0x1>
     8c8:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <__data_end>
		}

		scan_encoder1();
     8cc:	0e 94 9c 01 	call	0x338	; 0x338 <scan_encoder1>
		scan_encoder2();
     8d0:	0e 94 ac 01 	call	0x358	; 0x358 <scan_encoder2>
		scan_ROW3();
     8d4:	0e 94 0a 01 	call	0x214	; 0x214 <scan_ROW3>
		scan_ROW4();
     8d8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <scan_ROW4>
		scan_ROW1();
     8dc:	0e 94 78 00 	call	0xf0	; 0xf0 <scan_ROW1>
		scan_ROW2();
     8e0:	0e 94 c1 00 	call	0x182	; 0x182 <scan_ROW2>

		for(uint8_t j=0; j< NO_OF_KEYS;  j++)
     8e4:	10 e0       	ldi	r17, 0x00	; 0
     8e6:	3c c0       	rjmp	.+120    	; 0x960 <__stack+0x61>
		{
			if(buttonPressed[j].changed)
     8e8:	c1 2f       	mov	r28, r17
     8ea:	d0 e0       	ldi	r29, 0x00	; 0
     8ec:	fe 01       	movw	r30, r28
     8ee:	ee 0f       	add	r30, r30
     8f0:	ff 1f       	adc	r31, r31
     8f2:	ec 0f       	add	r30, r28
     8f4:	fd 1f       	adc	r31, r29
     8f6:	ee 0f       	add	r30, r30
     8f8:	ff 1f       	adc	r31, r31
     8fa:	e0 50       	subi	r30, 0x00	; 0
     8fc:	ff 4f       	sbci	r31, 0xFF	; 255
     8fe:	83 81       	ldd	r24, Z+3	; 0x03
     900:	88 23       	and	r24, r24
     902:	69 f1       	breq	.+90     	; 0x95e <__stack+0x5f>
			{
				snprintf(dane, DATA_SIZE, "<KB:%c>\r\n", buttonPressed[j].state );
     904:	7e 01       	movw	r14, r28
     906:	ee 0c       	add	r14, r14
     908:	ff 1c       	adc	r15, r15
     90a:	f7 01       	movw	r30, r14
     90c:	ec 0f       	add	r30, r28
     90e:	fd 1f       	adc	r31, r29
     910:	ee 0f       	add	r30, r30
     912:	ff 1f       	adc	r31, r31
     914:	e0 50       	subi	r30, 0x00	; 0
     916:	ff 4f       	sbci	r31, 0xFF	; 255
     918:	81 81       	ldd	r24, Z+1	; 0x01
     91a:	1f 92       	push	r1
     91c:	8f 93       	push	r24
     91e:	86 e9       	ldi	r24, 0x96	; 150
     920:	91 e0       	ldi	r25, 0x01	; 1
     922:	9f 93       	push	r25
     924:	8f 93       	push	r24
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	8f 93       	push	r24
     92a:	1f 92       	push	r1
     92c:	8a ed       	ldi	r24, 0xDA	; 218
     92e:	91 e0       	ldi	r25, 0x01	; 1
     930:	9f 93       	push	r25
     932:	8f 93       	push	r24
     934:	0e 94 90 05 	call	0xb20	; 0xb20 <snprintf>
				serialWrite(dane);
     938:	8a ed       	ldi	r24, 0xDA	; 218
     93a:	91 e0       	ldi	r25, 0x01	; 1
     93c:	0e 94 8a 03 	call	0x714	; 0x714 <serialWrite>
				buttonPressed[j].changed = false;
     940:	ce 0d       	add	r28, r14
     942:	df 1d       	adc	r29, r15
     944:	cc 0f       	add	r28, r28
     946:	dd 1f       	adc	r29, r29
     948:	c0 50       	subi	r28, 0x00	; 0
     94a:	df 4f       	sbci	r29, 0xFF	; 255
     94c:	1b 82       	std	Y+3, r1	; 0x03
     94e:	ed b7       	in	r30, 0x3d	; 61
     950:	fe b7       	in	r31, 0x3e	; 62
     952:	38 96       	adiw	r30, 0x08	; 8
     954:	0f b6       	in	r0, 0x3f	; 63
     956:	f8 94       	cli
     958:	fe bf       	out	0x3e, r31	; 62
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	ed bf       	out	0x3d, r30	; 61
		scan_ROW3();
		scan_ROW4();
		scan_ROW1();
		scan_ROW2();

		for(uint8_t j=0; j< NO_OF_KEYS;  j++)
     95e:	1f 5f       	subi	r17, 0xFF	; 255
     960:	10 31       	cpi	r17, 0x10	; 16
     962:	10 f2       	brcs	.-124    	; 0x8e8 <__DATA_REGION_LENGTH__+0xe8>
     964:	c0 e0       	ldi	r28, 0x00	; 0
     966:	62 c0       	rjmp	.+196    	; 0xa2c <__stack+0x12d>
				buttonPressed[j].changed = false;
			}
		}
		for( uint8_t i=0; i< NO_OF_ENCODERS; i++)
		{ 
			if( e1[i].b.changed )		
     968:	ec 2e       	mov	r14, r28
     96a:	f1 2c       	mov	r15, r1
     96c:	8b e0       	ldi	r24, 0x0B	; 11
     96e:	8e 9d       	mul	r24, r14
     970:	f0 01       	movw	r30, r0
     972:	8f 9d       	mul	r24, r15
     974:	f0 0d       	add	r31, r0
     976:	11 24       	eor	r1, r1
     978:	e0 5a       	subi	r30, 0xA0	; 160
     97a:	fe 4f       	sbci	r31, 0xFE	; 254
     97c:	83 81       	ldd	r24, Z+3	; 0x03
     97e:	88 23       	and	r24, r24
     980:	09 f1       	breq	.+66     	; 0x9c4 <__stack+0xc5>
			{
				snprintf(dane, DATA_SIZE, "<KE%d:%c>\r\n", i, e1[i].b.state);
     982:	8f 01       	movw	r16, r30
     984:	81 81       	ldd	r24, Z+1	; 0x01
     986:	1f 92       	push	r1
     988:	8f 93       	push	r24
     98a:	1f 92       	push	r1
     98c:	cf 93       	push	r28
     98e:	80 ea       	ldi	r24, 0xA0	; 160
     990:	91 e0       	ldi	r25, 0x01	; 1
     992:	9f 93       	push	r25
     994:	8f 93       	push	r24
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	8f 93       	push	r24
     99a:	1f 92       	push	r1
     99c:	8a ed       	ldi	r24, 0xDA	; 218
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	9f 93       	push	r25
     9a2:	8f 93       	push	r24
     9a4:	0e 94 90 05 	call	0xb20	; 0xb20 <snprintf>
				serialWrite(dane);
     9a8:	8a ed       	ldi	r24, 0xDA	; 218
     9aa:	91 e0       	ldi	r25, 0x01	; 1
     9ac:	0e 94 8a 03 	call	0x714	; 0x714 <serialWrite>
				e1[i].b.changed = false;
     9b0:	f8 01       	movw	r30, r16
     9b2:	13 82       	std	Z+3, r1	; 0x03
     9b4:	8d b7       	in	r24, 0x3d	; 61
     9b6:	9e b7       	in	r25, 0x3e	; 62
     9b8:	0a 96       	adiw	r24, 0x0a	; 10
     9ba:	0f b6       	in	r0, 0x3f	; 63
     9bc:	f8 94       	cli
     9be:	9e bf       	out	0x3e, r25	; 62
     9c0:	0f be       	out	0x3f, r0	; 63
     9c2:	8d bf       	out	0x3d, r24	; 61
			}
			if(e1[i].changed)
     9c4:	8b e0       	ldi	r24, 0x0B	; 11
     9c6:	8e 9d       	mul	r24, r14
     9c8:	f0 01       	movw	r30, r0
     9ca:	8f 9d       	mul	r24, r15
     9cc:	f0 0d       	add	r31, r0
     9ce:	11 24       	eor	r1, r1
     9d0:	e0 5a       	subi	r30, 0xA0	; 160
     9d2:	fe 4f       	sbci	r31, 0xFE	; 254
     9d4:	82 85       	ldd	r24, Z+10	; 0x0a
     9d6:	88 23       	and	r24, r24
     9d8:	41 f1       	breq	.+80     	; 0xa2a <__stack+0x12b>
			{
				snprintf(dane, DATA_SIZE, "<EN%d:%06ld>\r\n", i, e1[i].counter);
     9da:	8f 01       	movw	r16, r30
     9dc:	36 96       	adiw	r30, 0x06	; 6
     9de:	83 81       	ldd	r24, Z+3	; 0x03
     9e0:	8f 93       	push	r24
     9e2:	82 81       	ldd	r24, Z+2	; 0x02
     9e4:	8f 93       	push	r24
     9e6:	81 81       	ldd	r24, Z+1	; 0x01
     9e8:	8f 93       	push	r24
     9ea:	f8 01       	movw	r30, r16
     9ec:	86 81       	ldd	r24, Z+6	; 0x06
     9ee:	8f 93       	push	r24
     9f0:	ff 92       	push	r15
     9f2:	ef 92       	push	r14
     9f4:	8c ea       	ldi	r24, 0xAC	; 172
     9f6:	91 e0       	ldi	r25, 0x01	; 1
     9f8:	9f 93       	push	r25
     9fa:	8f 93       	push	r24
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	8f 93       	push	r24
     a00:	1f 92       	push	r1
     a02:	8a ed       	ldi	r24, 0xDA	; 218
     a04:	91 e0       	ldi	r25, 0x01	; 1
     a06:	9f 93       	push	r25
     a08:	8f 93       	push	r24
     a0a:	0e 94 90 05 	call	0xb20	; 0xb20 <snprintf>
				serialWrite(dane);
     a0e:	8a ed       	ldi	r24, 0xDA	; 218
     a10:	91 e0       	ldi	r25, 0x01	; 1
     a12:	0e 94 8a 03 	call	0x714	; 0x714 <serialWrite>
				e1[i].changed = false;
     a16:	f8 01       	movw	r30, r16
     a18:	12 86       	std	Z+10, r1	; 0x0a
     a1a:	8d b7       	in	r24, 0x3d	; 61
     a1c:	9e b7       	in	r25, 0x3e	; 62
     a1e:	0c 96       	adiw	r24, 0x0c	; 12
     a20:	0f b6       	in	r0, 0x3f	; 63
     a22:	f8 94       	cli
     a24:	9e bf       	out	0x3e, r25	; 62
     a26:	0f be       	out	0x3f, r0	; 63
     a28:	8d bf       	out	0x3d, r24	; 61
				snprintf(dane, DATA_SIZE, "<KB:%c>\r\n", buttonPressed[j].state );
				serialWrite(dane);
				buttonPressed[j].changed = false;
			}
		}
		for( uint8_t i=0; i< NO_OF_ENCODERS; i++)
     a2a:	cf 5f       	subi	r28, 0xFF	; 255
     a2c:	c2 30       	cpi	r28, 0x02	; 2
     a2e:	08 f4       	brcc	.+2      	; 0xa32 <__stack+0x133>
     a30:	9b cf       	rjmp	.-202    	; 0x968 <__stack+0x69>
     a32:	08 cf       	rjmp	.-496    	; 0x844 <__DATA_REGION_LENGTH__+0x44>

00000a34 <__vector_19>:
	}
	UCSR0B |= (1 << UDRIE0);
}

ISR(USART_UDRE_vect) 
{
     a34:	1f 92       	push	r1
     a36:	0f 92       	push	r0
     a38:	0f b6       	in	r0, 0x3f	; 63
     a3a:	0f 92       	push	r0
     a3c:	11 24       	eor	r1, r1
     a3e:	2f 93       	push	r18
     a40:	3f 93       	push	r19
     a42:	8f 93       	push	r24
     a44:	9f 93       	push	r25
     a46:	ef 93       	push	r30
     a48:	ff 93       	push	r31
	if(serialReadPos != serialWritePos)
     a4a:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <serialReadPos>
     a4e:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <serialReadPos+0x1>
     a52:	20 91 c2 01 	lds	r18, 0x01C2	; 0x8001c2 <serialWritePos>
     a56:	30 91 c3 01 	lds	r19, 0x01C3	; 0x8001c3 <serialWritePos+0x1>
     a5a:	82 17       	cp	r24, r18
     a5c:	93 07       	cpc	r25, r19
     a5e:	d9 f0       	breq	.+54     	; 0xa96 <__vector_19+0x62>
	{
		UDR0 = buffer[serialReadPos];
     a60:	fc 01       	movw	r30, r24
     a62:	e6 52       	subi	r30, 0x26	; 38
     a64:	fd 4f       	sbci	r31, 0xFD	; 253
     a66:	80 81       	ld	r24, Z
     a68:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		serialReadPos++;
     a6c:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <serialReadPos>
     a70:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <serialReadPos+0x1>
     a74:	01 96       	adiw	r24, 0x01	; 1
     a76:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <serialReadPos+0x1>
     a7a:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <serialReadPos>
		if(serialReadPos == serialWritePos)
     a7e:	20 91 c2 01 	lds	r18, 0x01C2	; 0x8001c2 <serialWritePos>
     a82:	30 91 c3 01 	lds	r19, 0x01C3	; 0x8001c3 <serialWritePos+0x1>
     a86:	82 17       	cp	r24, r18
     a88:	93 07       	cpc	r25, r19
     a8a:	29 f4       	brne	.+10     	; 0xa96 <__vector_19+0x62>
		{
			UCSR0B &= ~(1 << UDRIE0);
     a8c:	e1 ec       	ldi	r30, 0xC1	; 193
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	80 81       	ld	r24, Z
     a92:	8f 7d       	andi	r24, 0xDF	; 223
     a94:	80 83       	st	Z, r24
		}
	}
	serialReadPos &= DATA_MASK;
     a96:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <serialReadPos>
     a9a:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <serialReadPos+0x1>
     a9e:	99 27       	eor	r25, r25
     aa0:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <serialReadPos+0x1>
     aa4:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <serialReadPos>
}
     aa8:	ff 91       	pop	r31
     aaa:	ef 91       	pop	r30
     aac:	9f 91       	pop	r25
     aae:	8f 91       	pop	r24
     ab0:	3f 91       	pop	r19
     ab2:	2f 91       	pop	r18
     ab4:	0f 90       	pop	r0
     ab6:	0f be       	out	0x3f, r0	; 63
     ab8:	0f 90       	pop	r0
     aba:	1f 90       	pop	r1
     abc:	18 95       	reti

00000abe <__udivmodsi4>:
     abe:	a1 e2       	ldi	r26, 0x21	; 33
     ac0:	1a 2e       	mov	r1, r26
     ac2:	aa 1b       	sub	r26, r26
     ac4:	bb 1b       	sub	r27, r27
     ac6:	fd 01       	movw	r30, r26
     ac8:	0d c0       	rjmp	.+26     	; 0xae4 <__udivmodsi4_ep>

00000aca <__udivmodsi4_loop>:
     aca:	aa 1f       	adc	r26, r26
     acc:	bb 1f       	adc	r27, r27
     ace:	ee 1f       	adc	r30, r30
     ad0:	ff 1f       	adc	r31, r31
     ad2:	a2 17       	cp	r26, r18
     ad4:	b3 07       	cpc	r27, r19
     ad6:	e4 07       	cpc	r30, r20
     ad8:	f5 07       	cpc	r31, r21
     ada:	20 f0       	brcs	.+8      	; 0xae4 <__udivmodsi4_ep>
     adc:	a2 1b       	sub	r26, r18
     ade:	b3 0b       	sbc	r27, r19
     ae0:	e4 0b       	sbc	r30, r20
     ae2:	f5 0b       	sbc	r31, r21

00000ae4 <__udivmodsi4_ep>:
     ae4:	66 1f       	adc	r22, r22
     ae6:	77 1f       	adc	r23, r23
     ae8:	88 1f       	adc	r24, r24
     aea:	99 1f       	adc	r25, r25
     aec:	1a 94       	dec	r1
     aee:	69 f7       	brne	.-38     	; 0xaca <__udivmodsi4_loop>
     af0:	60 95       	com	r22
     af2:	70 95       	com	r23
     af4:	80 95       	com	r24
     af6:	90 95       	com	r25
     af8:	9b 01       	movw	r18, r22
     afa:	ac 01       	movw	r20, r24
     afc:	bd 01       	movw	r22, r26
     afe:	cf 01       	movw	r24, r30
     b00:	08 95       	ret

00000b02 <__umulhisi3>:
     b02:	a2 9f       	mul	r26, r18
     b04:	b0 01       	movw	r22, r0
     b06:	b3 9f       	mul	r27, r19
     b08:	c0 01       	movw	r24, r0
     b0a:	a3 9f       	mul	r26, r19
     b0c:	70 0d       	add	r23, r0
     b0e:	81 1d       	adc	r24, r1
     b10:	11 24       	eor	r1, r1
     b12:	91 1d       	adc	r25, r1
     b14:	b2 9f       	mul	r27, r18
     b16:	70 0d       	add	r23, r0
     b18:	81 1d       	adc	r24, r1
     b1a:	11 24       	eor	r1, r1
     b1c:	91 1d       	adc	r25, r1
     b1e:	08 95       	ret

00000b20 <snprintf>:
     b20:	ae e0       	ldi	r26, 0x0E	; 14
     b22:	b0 e0       	ldi	r27, 0x00	; 0
     b24:	e6 e9       	ldi	r30, 0x96	; 150
     b26:	f5 e0       	ldi	r31, 0x05	; 5
     b28:	0c 94 5f 08 	jmp	0x10be	; 0x10be <__prologue_saves__+0x1c>
     b2c:	0d 89       	ldd	r16, Y+21	; 0x15
     b2e:	1e 89       	ldd	r17, Y+22	; 0x16
     b30:	8f 89       	ldd	r24, Y+23	; 0x17
     b32:	98 8d       	ldd	r25, Y+24	; 0x18
     b34:	26 e0       	ldi	r18, 0x06	; 6
     b36:	2c 83       	std	Y+4, r18	; 0x04
     b38:	1a 83       	std	Y+2, r17	; 0x02
     b3a:	09 83       	std	Y+1, r16	; 0x01
     b3c:	97 ff       	sbrs	r25, 7
     b3e:	02 c0       	rjmp	.+4      	; 0xb44 <snprintf+0x24>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	90 e8       	ldi	r25, 0x80	; 128
     b44:	01 97       	sbiw	r24, 0x01	; 1
     b46:	9e 83       	std	Y+6, r25	; 0x06
     b48:	8d 83       	std	Y+5, r24	; 0x05
     b4a:	ae 01       	movw	r20, r28
     b4c:	45 5e       	subi	r20, 0xE5	; 229
     b4e:	5f 4f       	sbci	r21, 0xFF	; 255
     b50:	69 8d       	ldd	r22, Y+25	; 0x19
     b52:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b54:	ce 01       	movw	r24, r28
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	0e 94 c0 05 	call	0xb80	; 0xb80 <vfprintf>
     b5c:	4d 81       	ldd	r20, Y+5	; 0x05
     b5e:	5e 81       	ldd	r21, Y+6	; 0x06
     b60:	57 fd       	sbrc	r21, 7
     b62:	0a c0       	rjmp	.+20     	; 0xb78 <snprintf+0x58>
     b64:	2f 81       	ldd	r18, Y+7	; 0x07
     b66:	38 85       	ldd	r19, Y+8	; 0x08
     b68:	42 17       	cp	r20, r18
     b6a:	53 07       	cpc	r21, r19
     b6c:	0c f4       	brge	.+2      	; 0xb70 <snprintf+0x50>
     b6e:	9a 01       	movw	r18, r20
     b70:	f8 01       	movw	r30, r16
     b72:	e2 0f       	add	r30, r18
     b74:	f3 1f       	adc	r31, r19
     b76:	10 82       	st	Z, r1
     b78:	2e 96       	adiw	r28, 0x0e	; 14
     b7a:	e4 e0       	ldi	r30, 0x04	; 4
     b7c:	0c 94 7b 08 	jmp	0x10f6	; 0x10f6 <__epilogue_restores__+0x1c>

00000b80 <vfprintf>:
     b80:	ab e0       	ldi	r26, 0x0B	; 11
     b82:	b0 e0       	ldi	r27, 0x00	; 0
     b84:	e6 ec       	ldi	r30, 0xC6	; 198
     b86:	f5 e0       	ldi	r31, 0x05	; 5
     b88:	0c 94 51 08 	jmp	0x10a2	; 0x10a2 <__prologue_saves__>
     b8c:	6c 01       	movw	r12, r24
     b8e:	7b 01       	movw	r14, r22
     b90:	8a 01       	movw	r16, r20
     b92:	fc 01       	movw	r30, r24
     b94:	17 82       	std	Z+7, r1	; 0x07
     b96:	16 82       	std	Z+6, r1	; 0x06
     b98:	83 81       	ldd	r24, Z+3	; 0x03
     b9a:	81 ff       	sbrs	r24, 1
     b9c:	cc c1       	rjmp	.+920    	; 0xf36 <vfprintf+0x3b6>
     b9e:	ce 01       	movw	r24, r28
     ba0:	01 96       	adiw	r24, 0x01	; 1
     ba2:	3c 01       	movw	r6, r24
     ba4:	f6 01       	movw	r30, r12
     ba6:	93 81       	ldd	r25, Z+3	; 0x03
     ba8:	f7 01       	movw	r30, r14
     baa:	93 fd       	sbrc	r25, 3
     bac:	85 91       	lpm	r24, Z+
     bae:	93 ff       	sbrs	r25, 3
     bb0:	81 91       	ld	r24, Z+
     bb2:	7f 01       	movw	r14, r30
     bb4:	88 23       	and	r24, r24
     bb6:	09 f4       	brne	.+2      	; 0xbba <vfprintf+0x3a>
     bb8:	ba c1       	rjmp	.+884    	; 0xf2e <vfprintf+0x3ae>
     bba:	85 32       	cpi	r24, 0x25	; 37
     bbc:	39 f4       	brne	.+14     	; 0xbcc <vfprintf+0x4c>
     bbe:	93 fd       	sbrc	r25, 3
     bc0:	85 91       	lpm	r24, Z+
     bc2:	93 ff       	sbrs	r25, 3
     bc4:	81 91       	ld	r24, Z+
     bc6:	7f 01       	movw	r14, r30
     bc8:	85 32       	cpi	r24, 0x25	; 37
     bca:	29 f4       	brne	.+10     	; 0xbd6 <vfprintf+0x56>
     bcc:	b6 01       	movw	r22, r12
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	0e 94 b7 07 	call	0xf6e	; 0xf6e <fputc>
     bd4:	e7 cf       	rjmp	.-50     	; 0xba4 <vfprintf+0x24>
     bd6:	91 2c       	mov	r9, r1
     bd8:	21 2c       	mov	r2, r1
     bda:	31 2c       	mov	r3, r1
     bdc:	ff e1       	ldi	r31, 0x1F	; 31
     bde:	f3 15       	cp	r31, r3
     be0:	d8 f0       	brcs	.+54     	; 0xc18 <vfprintf+0x98>
     be2:	8b 32       	cpi	r24, 0x2B	; 43
     be4:	79 f0       	breq	.+30     	; 0xc04 <vfprintf+0x84>
     be6:	38 f4       	brcc	.+14     	; 0xbf6 <vfprintf+0x76>
     be8:	80 32       	cpi	r24, 0x20	; 32
     bea:	79 f0       	breq	.+30     	; 0xc0a <vfprintf+0x8a>
     bec:	83 32       	cpi	r24, 0x23	; 35
     bee:	a1 f4       	brne	.+40     	; 0xc18 <vfprintf+0x98>
     bf0:	23 2d       	mov	r18, r3
     bf2:	20 61       	ori	r18, 0x10	; 16
     bf4:	1d c0       	rjmp	.+58     	; 0xc30 <vfprintf+0xb0>
     bf6:	8d 32       	cpi	r24, 0x2D	; 45
     bf8:	61 f0       	breq	.+24     	; 0xc12 <vfprintf+0x92>
     bfa:	80 33       	cpi	r24, 0x30	; 48
     bfc:	69 f4       	brne	.+26     	; 0xc18 <vfprintf+0x98>
     bfe:	23 2d       	mov	r18, r3
     c00:	21 60       	ori	r18, 0x01	; 1
     c02:	16 c0       	rjmp	.+44     	; 0xc30 <vfprintf+0xb0>
     c04:	83 2d       	mov	r24, r3
     c06:	82 60       	ori	r24, 0x02	; 2
     c08:	38 2e       	mov	r3, r24
     c0a:	e3 2d       	mov	r30, r3
     c0c:	e4 60       	ori	r30, 0x04	; 4
     c0e:	3e 2e       	mov	r3, r30
     c10:	2a c0       	rjmp	.+84     	; 0xc66 <vfprintf+0xe6>
     c12:	f3 2d       	mov	r31, r3
     c14:	f8 60       	ori	r31, 0x08	; 8
     c16:	1d c0       	rjmp	.+58     	; 0xc52 <vfprintf+0xd2>
     c18:	37 fc       	sbrc	r3, 7
     c1a:	2d c0       	rjmp	.+90     	; 0xc76 <vfprintf+0xf6>
     c1c:	20 ed       	ldi	r18, 0xD0	; 208
     c1e:	28 0f       	add	r18, r24
     c20:	2a 30       	cpi	r18, 0x0A	; 10
     c22:	40 f0       	brcs	.+16     	; 0xc34 <vfprintf+0xb4>
     c24:	8e 32       	cpi	r24, 0x2E	; 46
     c26:	b9 f4       	brne	.+46     	; 0xc56 <vfprintf+0xd6>
     c28:	36 fc       	sbrc	r3, 6
     c2a:	81 c1       	rjmp	.+770    	; 0xf2e <vfprintf+0x3ae>
     c2c:	23 2d       	mov	r18, r3
     c2e:	20 64       	ori	r18, 0x40	; 64
     c30:	32 2e       	mov	r3, r18
     c32:	19 c0       	rjmp	.+50     	; 0xc66 <vfprintf+0xe6>
     c34:	36 fe       	sbrs	r3, 6
     c36:	06 c0       	rjmp	.+12     	; 0xc44 <vfprintf+0xc4>
     c38:	8a e0       	ldi	r24, 0x0A	; 10
     c3a:	98 9e       	mul	r9, r24
     c3c:	20 0d       	add	r18, r0
     c3e:	11 24       	eor	r1, r1
     c40:	92 2e       	mov	r9, r18
     c42:	11 c0       	rjmp	.+34     	; 0xc66 <vfprintf+0xe6>
     c44:	ea e0       	ldi	r30, 0x0A	; 10
     c46:	2e 9e       	mul	r2, r30
     c48:	20 0d       	add	r18, r0
     c4a:	11 24       	eor	r1, r1
     c4c:	22 2e       	mov	r2, r18
     c4e:	f3 2d       	mov	r31, r3
     c50:	f0 62       	ori	r31, 0x20	; 32
     c52:	3f 2e       	mov	r3, r31
     c54:	08 c0       	rjmp	.+16     	; 0xc66 <vfprintf+0xe6>
     c56:	8c 36       	cpi	r24, 0x6C	; 108
     c58:	21 f4       	brne	.+8      	; 0xc62 <vfprintf+0xe2>
     c5a:	83 2d       	mov	r24, r3
     c5c:	80 68       	ori	r24, 0x80	; 128
     c5e:	38 2e       	mov	r3, r24
     c60:	02 c0       	rjmp	.+4      	; 0xc66 <vfprintf+0xe6>
     c62:	88 36       	cpi	r24, 0x68	; 104
     c64:	41 f4       	brne	.+16     	; 0xc76 <vfprintf+0xf6>
     c66:	f7 01       	movw	r30, r14
     c68:	93 fd       	sbrc	r25, 3
     c6a:	85 91       	lpm	r24, Z+
     c6c:	93 ff       	sbrs	r25, 3
     c6e:	81 91       	ld	r24, Z+
     c70:	7f 01       	movw	r14, r30
     c72:	81 11       	cpse	r24, r1
     c74:	b3 cf       	rjmp	.-154    	; 0xbdc <vfprintf+0x5c>
     c76:	98 2f       	mov	r25, r24
     c78:	9f 7d       	andi	r25, 0xDF	; 223
     c7a:	95 54       	subi	r25, 0x45	; 69
     c7c:	93 30       	cpi	r25, 0x03	; 3
     c7e:	28 f4       	brcc	.+10     	; 0xc8a <vfprintf+0x10a>
     c80:	0c 5f       	subi	r16, 0xFC	; 252
     c82:	1f 4f       	sbci	r17, 0xFF	; 255
     c84:	9f e3       	ldi	r25, 0x3F	; 63
     c86:	99 83       	std	Y+1, r25	; 0x01
     c88:	0d c0       	rjmp	.+26     	; 0xca4 <vfprintf+0x124>
     c8a:	83 36       	cpi	r24, 0x63	; 99
     c8c:	31 f0       	breq	.+12     	; 0xc9a <vfprintf+0x11a>
     c8e:	83 37       	cpi	r24, 0x73	; 115
     c90:	71 f0       	breq	.+28     	; 0xcae <vfprintf+0x12e>
     c92:	83 35       	cpi	r24, 0x53	; 83
     c94:	09 f0       	breq	.+2      	; 0xc98 <vfprintf+0x118>
     c96:	59 c0       	rjmp	.+178    	; 0xd4a <vfprintf+0x1ca>
     c98:	21 c0       	rjmp	.+66     	; 0xcdc <vfprintf+0x15c>
     c9a:	f8 01       	movw	r30, r16
     c9c:	80 81       	ld	r24, Z
     c9e:	89 83       	std	Y+1, r24	; 0x01
     ca0:	0e 5f       	subi	r16, 0xFE	; 254
     ca2:	1f 4f       	sbci	r17, 0xFF	; 255
     ca4:	88 24       	eor	r8, r8
     ca6:	83 94       	inc	r8
     ca8:	91 2c       	mov	r9, r1
     caa:	53 01       	movw	r10, r6
     cac:	13 c0       	rjmp	.+38     	; 0xcd4 <vfprintf+0x154>
     cae:	28 01       	movw	r4, r16
     cb0:	f2 e0       	ldi	r31, 0x02	; 2
     cb2:	4f 0e       	add	r4, r31
     cb4:	51 1c       	adc	r5, r1
     cb6:	f8 01       	movw	r30, r16
     cb8:	a0 80       	ld	r10, Z
     cba:	b1 80       	ldd	r11, Z+1	; 0x01
     cbc:	36 fe       	sbrs	r3, 6
     cbe:	03 c0       	rjmp	.+6      	; 0xcc6 <vfprintf+0x146>
     cc0:	69 2d       	mov	r22, r9
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <vfprintf+0x14a>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	c5 01       	movw	r24, r10
     ccc:	0e 94 ac 07 	call	0xf58	; 0xf58 <strnlen>
     cd0:	4c 01       	movw	r8, r24
     cd2:	82 01       	movw	r16, r4
     cd4:	f3 2d       	mov	r31, r3
     cd6:	ff 77       	andi	r31, 0x7F	; 127
     cd8:	3f 2e       	mov	r3, r31
     cda:	16 c0       	rjmp	.+44     	; 0xd08 <vfprintf+0x188>
     cdc:	28 01       	movw	r4, r16
     cde:	22 e0       	ldi	r18, 0x02	; 2
     ce0:	42 0e       	add	r4, r18
     ce2:	51 1c       	adc	r5, r1
     ce4:	f8 01       	movw	r30, r16
     ce6:	a0 80       	ld	r10, Z
     ce8:	b1 80       	ldd	r11, Z+1	; 0x01
     cea:	36 fe       	sbrs	r3, 6
     cec:	03 c0       	rjmp	.+6      	; 0xcf4 <vfprintf+0x174>
     cee:	69 2d       	mov	r22, r9
     cf0:	70 e0       	ldi	r23, 0x00	; 0
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <vfprintf+0x178>
     cf4:	6f ef       	ldi	r22, 0xFF	; 255
     cf6:	7f ef       	ldi	r23, 0xFF	; 255
     cf8:	c5 01       	movw	r24, r10
     cfa:	0e 94 a1 07 	call	0xf42	; 0xf42 <strnlen_P>
     cfe:	4c 01       	movw	r8, r24
     d00:	f3 2d       	mov	r31, r3
     d02:	f0 68       	ori	r31, 0x80	; 128
     d04:	3f 2e       	mov	r3, r31
     d06:	82 01       	movw	r16, r4
     d08:	33 fc       	sbrc	r3, 3
     d0a:	1b c0       	rjmp	.+54     	; 0xd42 <vfprintf+0x1c2>
     d0c:	82 2d       	mov	r24, r2
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	88 16       	cp	r8, r24
     d12:	99 06       	cpc	r9, r25
     d14:	b0 f4       	brcc	.+44     	; 0xd42 <vfprintf+0x1c2>
     d16:	b6 01       	movw	r22, r12
     d18:	80 e2       	ldi	r24, 0x20	; 32
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	0e 94 b7 07 	call	0xf6e	; 0xf6e <fputc>
     d20:	2a 94       	dec	r2
     d22:	f4 cf       	rjmp	.-24     	; 0xd0c <vfprintf+0x18c>
     d24:	f5 01       	movw	r30, r10
     d26:	37 fc       	sbrc	r3, 7
     d28:	85 91       	lpm	r24, Z+
     d2a:	37 fe       	sbrs	r3, 7
     d2c:	81 91       	ld	r24, Z+
     d2e:	5f 01       	movw	r10, r30
     d30:	b6 01       	movw	r22, r12
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	0e 94 b7 07 	call	0xf6e	; 0xf6e <fputc>
     d38:	21 10       	cpse	r2, r1
     d3a:	2a 94       	dec	r2
     d3c:	21 e0       	ldi	r18, 0x01	; 1
     d3e:	82 1a       	sub	r8, r18
     d40:	91 08       	sbc	r9, r1
     d42:	81 14       	cp	r8, r1
     d44:	91 04       	cpc	r9, r1
     d46:	71 f7       	brne	.-36     	; 0xd24 <vfprintf+0x1a4>
     d48:	e8 c0       	rjmp	.+464    	; 0xf1a <vfprintf+0x39a>
     d4a:	84 36       	cpi	r24, 0x64	; 100
     d4c:	11 f0       	breq	.+4      	; 0xd52 <vfprintf+0x1d2>
     d4e:	89 36       	cpi	r24, 0x69	; 105
     d50:	41 f5       	brne	.+80     	; 0xda2 <vfprintf+0x222>
     d52:	f8 01       	movw	r30, r16
     d54:	37 fe       	sbrs	r3, 7
     d56:	07 c0       	rjmp	.+14     	; 0xd66 <vfprintf+0x1e6>
     d58:	60 81       	ld	r22, Z
     d5a:	71 81       	ldd	r23, Z+1	; 0x01
     d5c:	82 81       	ldd	r24, Z+2	; 0x02
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	0c 5f       	subi	r16, 0xFC	; 252
     d62:	1f 4f       	sbci	r17, 0xFF	; 255
     d64:	08 c0       	rjmp	.+16     	; 0xd76 <vfprintf+0x1f6>
     d66:	60 81       	ld	r22, Z
     d68:	71 81       	ldd	r23, Z+1	; 0x01
     d6a:	07 2e       	mov	r0, r23
     d6c:	00 0c       	add	r0, r0
     d6e:	88 0b       	sbc	r24, r24
     d70:	99 0b       	sbc	r25, r25
     d72:	0e 5f       	subi	r16, 0xFE	; 254
     d74:	1f 4f       	sbci	r17, 0xFF	; 255
     d76:	f3 2d       	mov	r31, r3
     d78:	ff 76       	andi	r31, 0x6F	; 111
     d7a:	3f 2e       	mov	r3, r31
     d7c:	97 ff       	sbrs	r25, 7
     d7e:	09 c0       	rjmp	.+18     	; 0xd92 <vfprintf+0x212>
     d80:	90 95       	com	r25
     d82:	80 95       	com	r24
     d84:	70 95       	com	r23
     d86:	61 95       	neg	r22
     d88:	7f 4f       	sbci	r23, 0xFF	; 255
     d8a:	8f 4f       	sbci	r24, 0xFF	; 255
     d8c:	9f 4f       	sbci	r25, 0xFF	; 255
     d8e:	f0 68       	ori	r31, 0x80	; 128
     d90:	3f 2e       	mov	r3, r31
     d92:	2a e0       	ldi	r18, 0x0A	; 10
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	a3 01       	movw	r20, r6
     d98:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__ultoa_invert>
     d9c:	88 2e       	mov	r8, r24
     d9e:	86 18       	sub	r8, r6
     da0:	45 c0       	rjmp	.+138    	; 0xe2c <vfprintf+0x2ac>
     da2:	85 37       	cpi	r24, 0x75	; 117
     da4:	31 f4       	brne	.+12     	; 0xdb2 <vfprintf+0x232>
     da6:	23 2d       	mov	r18, r3
     da8:	2f 7e       	andi	r18, 0xEF	; 239
     daa:	b2 2e       	mov	r11, r18
     dac:	2a e0       	ldi	r18, 0x0A	; 10
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	25 c0       	rjmp	.+74     	; 0xdfc <vfprintf+0x27c>
     db2:	93 2d       	mov	r25, r3
     db4:	99 7f       	andi	r25, 0xF9	; 249
     db6:	b9 2e       	mov	r11, r25
     db8:	8f 36       	cpi	r24, 0x6F	; 111
     dba:	c1 f0       	breq	.+48     	; 0xdec <vfprintf+0x26c>
     dbc:	18 f4       	brcc	.+6      	; 0xdc4 <vfprintf+0x244>
     dbe:	88 35       	cpi	r24, 0x58	; 88
     dc0:	79 f0       	breq	.+30     	; 0xde0 <vfprintf+0x260>
     dc2:	b5 c0       	rjmp	.+362    	; 0xf2e <vfprintf+0x3ae>
     dc4:	80 37       	cpi	r24, 0x70	; 112
     dc6:	19 f0       	breq	.+6      	; 0xdce <vfprintf+0x24e>
     dc8:	88 37       	cpi	r24, 0x78	; 120
     dca:	21 f0       	breq	.+8      	; 0xdd4 <vfprintf+0x254>
     dcc:	b0 c0       	rjmp	.+352    	; 0xf2e <vfprintf+0x3ae>
     dce:	e9 2f       	mov	r30, r25
     dd0:	e0 61       	ori	r30, 0x10	; 16
     dd2:	be 2e       	mov	r11, r30
     dd4:	b4 fe       	sbrs	r11, 4
     dd6:	0d c0       	rjmp	.+26     	; 0xdf2 <vfprintf+0x272>
     dd8:	fb 2d       	mov	r31, r11
     dda:	f4 60       	ori	r31, 0x04	; 4
     ddc:	bf 2e       	mov	r11, r31
     dde:	09 c0       	rjmp	.+18     	; 0xdf2 <vfprintf+0x272>
     de0:	34 fe       	sbrs	r3, 4
     de2:	0a c0       	rjmp	.+20     	; 0xdf8 <vfprintf+0x278>
     de4:	29 2f       	mov	r18, r25
     de6:	26 60       	ori	r18, 0x06	; 6
     de8:	b2 2e       	mov	r11, r18
     dea:	06 c0       	rjmp	.+12     	; 0xdf8 <vfprintf+0x278>
     dec:	28 e0       	ldi	r18, 0x08	; 8
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	05 c0       	rjmp	.+10     	; 0xdfc <vfprintf+0x27c>
     df2:	20 e1       	ldi	r18, 0x10	; 16
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <vfprintf+0x27c>
     df8:	20 e1       	ldi	r18, 0x10	; 16
     dfa:	32 e0       	ldi	r19, 0x02	; 2
     dfc:	f8 01       	movw	r30, r16
     dfe:	b7 fe       	sbrs	r11, 7
     e00:	07 c0       	rjmp	.+14     	; 0xe10 <vfprintf+0x290>
     e02:	60 81       	ld	r22, Z
     e04:	71 81       	ldd	r23, Z+1	; 0x01
     e06:	82 81       	ldd	r24, Z+2	; 0x02
     e08:	93 81       	ldd	r25, Z+3	; 0x03
     e0a:	0c 5f       	subi	r16, 0xFC	; 252
     e0c:	1f 4f       	sbci	r17, 0xFF	; 255
     e0e:	06 c0       	rjmp	.+12     	; 0xe1c <vfprintf+0x29c>
     e10:	60 81       	ld	r22, Z
     e12:	71 81       	ldd	r23, Z+1	; 0x01
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 5f       	subi	r16, 0xFE	; 254
     e1a:	1f 4f       	sbci	r17, 0xFF	; 255
     e1c:	a3 01       	movw	r20, r6
     e1e:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__ultoa_invert>
     e22:	88 2e       	mov	r8, r24
     e24:	86 18       	sub	r8, r6
     e26:	fb 2d       	mov	r31, r11
     e28:	ff 77       	andi	r31, 0x7F	; 127
     e2a:	3f 2e       	mov	r3, r31
     e2c:	36 fe       	sbrs	r3, 6
     e2e:	0d c0       	rjmp	.+26     	; 0xe4a <vfprintf+0x2ca>
     e30:	23 2d       	mov	r18, r3
     e32:	2e 7f       	andi	r18, 0xFE	; 254
     e34:	a2 2e       	mov	r10, r18
     e36:	89 14       	cp	r8, r9
     e38:	58 f4       	brcc	.+22     	; 0xe50 <vfprintf+0x2d0>
     e3a:	34 fe       	sbrs	r3, 4
     e3c:	0b c0       	rjmp	.+22     	; 0xe54 <vfprintf+0x2d4>
     e3e:	32 fc       	sbrc	r3, 2
     e40:	09 c0       	rjmp	.+18     	; 0xe54 <vfprintf+0x2d4>
     e42:	83 2d       	mov	r24, r3
     e44:	8e 7e       	andi	r24, 0xEE	; 238
     e46:	a8 2e       	mov	r10, r24
     e48:	05 c0       	rjmp	.+10     	; 0xe54 <vfprintf+0x2d4>
     e4a:	b8 2c       	mov	r11, r8
     e4c:	a3 2c       	mov	r10, r3
     e4e:	03 c0       	rjmp	.+6      	; 0xe56 <vfprintf+0x2d6>
     e50:	b8 2c       	mov	r11, r8
     e52:	01 c0       	rjmp	.+2      	; 0xe56 <vfprintf+0x2d6>
     e54:	b9 2c       	mov	r11, r9
     e56:	a4 fe       	sbrs	r10, 4
     e58:	0f c0       	rjmp	.+30     	; 0xe78 <vfprintf+0x2f8>
     e5a:	fe 01       	movw	r30, r28
     e5c:	e8 0d       	add	r30, r8
     e5e:	f1 1d       	adc	r31, r1
     e60:	80 81       	ld	r24, Z
     e62:	80 33       	cpi	r24, 0x30	; 48
     e64:	21 f4       	brne	.+8      	; 0xe6e <vfprintf+0x2ee>
     e66:	9a 2d       	mov	r25, r10
     e68:	99 7e       	andi	r25, 0xE9	; 233
     e6a:	a9 2e       	mov	r10, r25
     e6c:	09 c0       	rjmp	.+18     	; 0xe80 <vfprintf+0x300>
     e6e:	a2 fe       	sbrs	r10, 2
     e70:	06 c0       	rjmp	.+12     	; 0xe7e <vfprintf+0x2fe>
     e72:	b3 94       	inc	r11
     e74:	b3 94       	inc	r11
     e76:	04 c0       	rjmp	.+8      	; 0xe80 <vfprintf+0x300>
     e78:	8a 2d       	mov	r24, r10
     e7a:	86 78       	andi	r24, 0x86	; 134
     e7c:	09 f0       	breq	.+2      	; 0xe80 <vfprintf+0x300>
     e7e:	b3 94       	inc	r11
     e80:	a3 fc       	sbrc	r10, 3
     e82:	11 c0       	rjmp	.+34     	; 0xea6 <vfprintf+0x326>
     e84:	a0 fe       	sbrs	r10, 0
     e86:	06 c0       	rjmp	.+12     	; 0xe94 <vfprintf+0x314>
     e88:	b2 14       	cp	r11, r2
     e8a:	88 f4       	brcc	.+34     	; 0xeae <vfprintf+0x32e>
     e8c:	28 0c       	add	r2, r8
     e8e:	92 2c       	mov	r9, r2
     e90:	9b 18       	sub	r9, r11
     e92:	0e c0       	rjmp	.+28     	; 0xeb0 <vfprintf+0x330>
     e94:	b2 14       	cp	r11, r2
     e96:	60 f4       	brcc	.+24     	; 0xeb0 <vfprintf+0x330>
     e98:	b6 01       	movw	r22, r12
     e9a:	80 e2       	ldi	r24, 0x20	; 32
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	0e 94 b7 07 	call	0xf6e	; 0xf6e <fputc>
     ea2:	b3 94       	inc	r11
     ea4:	f7 cf       	rjmp	.-18     	; 0xe94 <vfprintf+0x314>
     ea6:	b2 14       	cp	r11, r2
     ea8:	18 f4       	brcc	.+6      	; 0xeb0 <vfprintf+0x330>
     eaa:	2b 18       	sub	r2, r11
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <vfprintf+0x332>
     eae:	98 2c       	mov	r9, r8
     eb0:	21 2c       	mov	r2, r1
     eb2:	a4 fe       	sbrs	r10, 4
     eb4:	10 c0       	rjmp	.+32     	; 0xed6 <vfprintf+0x356>
     eb6:	b6 01       	movw	r22, r12
     eb8:	80 e3       	ldi	r24, 0x30	; 48
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	0e 94 b7 07 	call	0xf6e	; 0xf6e <fputc>
     ec0:	a2 fe       	sbrs	r10, 2
     ec2:	17 c0       	rjmp	.+46     	; 0xef2 <vfprintf+0x372>
     ec4:	a1 fc       	sbrc	r10, 1
     ec6:	03 c0       	rjmp	.+6      	; 0xece <vfprintf+0x34e>
     ec8:	88 e7       	ldi	r24, 0x78	; 120
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <vfprintf+0x352>
     ece:	88 e5       	ldi	r24, 0x58	; 88
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	b6 01       	movw	r22, r12
     ed4:	0c c0       	rjmp	.+24     	; 0xeee <vfprintf+0x36e>
     ed6:	8a 2d       	mov	r24, r10
     ed8:	86 78       	andi	r24, 0x86	; 134
     eda:	59 f0       	breq	.+22     	; 0xef2 <vfprintf+0x372>
     edc:	a1 fe       	sbrs	r10, 1
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <vfprintf+0x364>
     ee0:	8b e2       	ldi	r24, 0x2B	; 43
     ee2:	01 c0       	rjmp	.+2      	; 0xee6 <vfprintf+0x366>
     ee4:	80 e2       	ldi	r24, 0x20	; 32
     ee6:	a7 fc       	sbrc	r10, 7
     ee8:	8d e2       	ldi	r24, 0x2D	; 45
     eea:	b6 01       	movw	r22, r12
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	0e 94 b7 07 	call	0xf6e	; 0xf6e <fputc>
     ef2:	89 14       	cp	r8, r9
     ef4:	38 f4       	brcc	.+14     	; 0xf04 <vfprintf+0x384>
     ef6:	b6 01       	movw	r22, r12
     ef8:	80 e3       	ldi	r24, 0x30	; 48
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	0e 94 b7 07 	call	0xf6e	; 0xf6e <fputc>
     f00:	9a 94       	dec	r9
     f02:	f7 cf       	rjmp	.-18     	; 0xef2 <vfprintf+0x372>
     f04:	8a 94       	dec	r8
     f06:	f3 01       	movw	r30, r6
     f08:	e8 0d       	add	r30, r8
     f0a:	f1 1d       	adc	r31, r1
     f0c:	80 81       	ld	r24, Z
     f0e:	b6 01       	movw	r22, r12
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	0e 94 b7 07 	call	0xf6e	; 0xf6e <fputc>
     f16:	81 10       	cpse	r8, r1
     f18:	f5 cf       	rjmp	.-22     	; 0xf04 <vfprintf+0x384>
     f1a:	22 20       	and	r2, r2
     f1c:	09 f4       	brne	.+2      	; 0xf20 <vfprintf+0x3a0>
     f1e:	42 ce       	rjmp	.-892    	; 0xba4 <vfprintf+0x24>
     f20:	b6 01       	movw	r22, r12
     f22:	80 e2       	ldi	r24, 0x20	; 32
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	0e 94 b7 07 	call	0xf6e	; 0xf6e <fputc>
     f2a:	2a 94       	dec	r2
     f2c:	f6 cf       	rjmp	.-20     	; 0xf1a <vfprintf+0x39a>
     f2e:	f6 01       	movw	r30, r12
     f30:	86 81       	ldd	r24, Z+6	; 0x06
     f32:	97 81       	ldd	r25, Z+7	; 0x07
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <vfprintf+0x3ba>
     f36:	8f ef       	ldi	r24, 0xFF	; 255
     f38:	9f ef       	ldi	r25, 0xFF	; 255
     f3a:	2b 96       	adiw	r28, 0x0b	; 11
     f3c:	e2 e1       	ldi	r30, 0x12	; 18
     f3e:	0c 94 6d 08 	jmp	0x10da	; 0x10da <__epilogue_restores__>

00000f42 <strnlen_P>:
     f42:	fc 01       	movw	r30, r24
     f44:	05 90       	lpm	r0, Z+
     f46:	61 50       	subi	r22, 0x01	; 1
     f48:	70 40       	sbci	r23, 0x00	; 0
     f4a:	01 10       	cpse	r0, r1
     f4c:	d8 f7       	brcc	.-10     	; 0xf44 <strnlen_P+0x2>
     f4e:	80 95       	com	r24
     f50:	90 95       	com	r25
     f52:	8e 0f       	add	r24, r30
     f54:	9f 1f       	adc	r25, r31
     f56:	08 95       	ret

00000f58 <strnlen>:
     f58:	fc 01       	movw	r30, r24
     f5a:	61 50       	subi	r22, 0x01	; 1
     f5c:	70 40       	sbci	r23, 0x00	; 0
     f5e:	01 90       	ld	r0, Z+
     f60:	01 10       	cpse	r0, r1
     f62:	d8 f7       	brcc	.-10     	; 0xf5a <strnlen+0x2>
     f64:	80 95       	com	r24
     f66:	90 95       	com	r25
     f68:	8e 0f       	add	r24, r30
     f6a:	9f 1f       	adc	r25, r31
     f6c:	08 95       	ret

00000f6e <fputc>:
     f6e:	0f 93       	push	r16
     f70:	1f 93       	push	r17
     f72:	cf 93       	push	r28
     f74:	df 93       	push	r29
     f76:	fb 01       	movw	r30, r22
     f78:	23 81       	ldd	r18, Z+3	; 0x03
     f7a:	21 fd       	sbrc	r18, 1
     f7c:	03 c0       	rjmp	.+6      	; 0xf84 <fputc+0x16>
     f7e:	8f ef       	ldi	r24, 0xFF	; 255
     f80:	9f ef       	ldi	r25, 0xFF	; 255
     f82:	2c c0       	rjmp	.+88     	; 0xfdc <fputc+0x6e>
     f84:	22 ff       	sbrs	r18, 2
     f86:	16 c0       	rjmp	.+44     	; 0xfb4 <fputc+0x46>
     f88:	46 81       	ldd	r20, Z+6	; 0x06
     f8a:	57 81       	ldd	r21, Z+7	; 0x07
     f8c:	24 81       	ldd	r18, Z+4	; 0x04
     f8e:	35 81       	ldd	r19, Z+5	; 0x05
     f90:	42 17       	cp	r20, r18
     f92:	53 07       	cpc	r21, r19
     f94:	44 f4       	brge	.+16     	; 0xfa6 <fputc+0x38>
     f96:	a0 81       	ld	r26, Z
     f98:	b1 81       	ldd	r27, Z+1	; 0x01
     f9a:	9d 01       	movw	r18, r26
     f9c:	2f 5f       	subi	r18, 0xFF	; 255
     f9e:	3f 4f       	sbci	r19, 0xFF	; 255
     fa0:	31 83       	std	Z+1, r19	; 0x01
     fa2:	20 83       	st	Z, r18
     fa4:	8c 93       	st	X, r24
     fa6:	26 81       	ldd	r18, Z+6	; 0x06
     fa8:	37 81       	ldd	r19, Z+7	; 0x07
     faa:	2f 5f       	subi	r18, 0xFF	; 255
     fac:	3f 4f       	sbci	r19, 0xFF	; 255
     fae:	37 83       	std	Z+7, r19	; 0x07
     fb0:	26 83       	std	Z+6, r18	; 0x06
     fb2:	14 c0       	rjmp	.+40     	; 0xfdc <fputc+0x6e>
     fb4:	8b 01       	movw	r16, r22
     fb6:	ec 01       	movw	r28, r24
     fb8:	fb 01       	movw	r30, r22
     fba:	00 84       	ldd	r0, Z+8	; 0x08
     fbc:	f1 85       	ldd	r31, Z+9	; 0x09
     fbe:	e0 2d       	mov	r30, r0
     fc0:	09 95       	icall
     fc2:	89 2b       	or	r24, r25
     fc4:	e1 f6       	brne	.-72     	; 0xf7e <fputc+0x10>
     fc6:	d8 01       	movw	r26, r16
     fc8:	16 96       	adiw	r26, 0x06	; 6
     fca:	8d 91       	ld	r24, X+
     fcc:	9c 91       	ld	r25, X
     fce:	17 97       	sbiw	r26, 0x07	; 7
     fd0:	01 96       	adiw	r24, 0x01	; 1
     fd2:	17 96       	adiw	r26, 0x07	; 7
     fd4:	9c 93       	st	X, r25
     fd6:	8e 93       	st	-X, r24
     fd8:	16 97       	sbiw	r26, 0x06	; 6
     fda:	ce 01       	movw	r24, r28
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
     fe0:	1f 91       	pop	r17
     fe2:	0f 91       	pop	r16
     fe4:	08 95       	ret

00000fe6 <__ultoa_invert>:
     fe6:	fa 01       	movw	r30, r20
     fe8:	aa 27       	eor	r26, r26
     fea:	28 30       	cpi	r18, 0x08	; 8
     fec:	51 f1       	breq	.+84     	; 0x1042 <__ultoa_invert+0x5c>
     fee:	20 31       	cpi	r18, 0x10	; 16
     ff0:	81 f1       	breq	.+96     	; 0x1052 <__ultoa_invert+0x6c>
     ff2:	e8 94       	clt
     ff4:	6f 93       	push	r22
     ff6:	6e 7f       	andi	r22, 0xFE	; 254
     ff8:	6e 5f       	subi	r22, 0xFE	; 254
     ffa:	7f 4f       	sbci	r23, 0xFF	; 255
     ffc:	8f 4f       	sbci	r24, 0xFF	; 255
     ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    1000:	af 4f       	sbci	r26, 0xFF	; 255
    1002:	b1 e0       	ldi	r27, 0x01	; 1
    1004:	3e d0       	rcall	.+124    	; 0x1082 <__ultoa_invert+0x9c>
    1006:	b4 e0       	ldi	r27, 0x04	; 4
    1008:	3c d0       	rcall	.+120    	; 0x1082 <__ultoa_invert+0x9c>
    100a:	67 0f       	add	r22, r23
    100c:	78 1f       	adc	r23, r24
    100e:	89 1f       	adc	r24, r25
    1010:	9a 1f       	adc	r25, r26
    1012:	a1 1d       	adc	r26, r1
    1014:	68 0f       	add	r22, r24
    1016:	79 1f       	adc	r23, r25
    1018:	8a 1f       	adc	r24, r26
    101a:	91 1d       	adc	r25, r1
    101c:	a1 1d       	adc	r26, r1
    101e:	6a 0f       	add	r22, r26
    1020:	71 1d       	adc	r23, r1
    1022:	81 1d       	adc	r24, r1
    1024:	91 1d       	adc	r25, r1
    1026:	a1 1d       	adc	r26, r1
    1028:	20 d0       	rcall	.+64     	; 0x106a <__ultoa_invert+0x84>
    102a:	09 f4       	brne	.+2      	; 0x102e <__ultoa_invert+0x48>
    102c:	68 94       	set
    102e:	3f 91       	pop	r19
    1030:	2a e0       	ldi	r18, 0x0A	; 10
    1032:	26 9f       	mul	r18, r22
    1034:	11 24       	eor	r1, r1
    1036:	30 19       	sub	r19, r0
    1038:	30 5d       	subi	r19, 0xD0	; 208
    103a:	31 93       	st	Z+, r19
    103c:	de f6       	brtc	.-74     	; 0xff4 <__ultoa_invert+0xe>
    103e:	cf 01       	movw	r24, r30
    1040:	08 95       	ret
    1042:	46 2f       	mov	r20, r22
    1044:	47 70       	andi	r20, 0x07	; 7
    1046:	40 5d       	subi	r20, 0xD0	; 208
    1048:	41 93       	st	Z+, r20
    104a:	b3 e0       	ldi	r27, 0x03	; 3
    104c:	0f d0       	rcall	.+30     	; 0x106c <__ultoa_invert+0x86>
    104e:	c9 f7       	brne	.-14     	; 0x1042 <__ultoa_invert+0x5c>
    1050:	f6 cf       	rjmp	.-20     	; 0x103e <__ultoa_invert+0x58>
    1052:	46 2f       	mov	r20, r22
    1054:	4f 70       	andi	r20, 0x0F	; 15
    1056:	40 5d       	subi	r20, 0xD0	; 208
    1058:	4a 33       	cpi	r20, 0x3A	; 58
    105a:	18 f0       	brcs	.+6      	; 0x1062 <__ultoa_invert+0x7c>
    105c:	49 5d       	subi	r20, 0xD9	; 217
    105e:	31 fd       	sbrc	r19, 1
    1060:	40 52       	subi	r20, 0x20	; 32
    1062:	41 93       	st	Z+, r20
    1064:	02 d0       	rcall	.+4      	; 0x106a <__ultoa_invert+0x84>
    1066:	a9 f7       	brne	.-22     	; 0x1052 <__ultoa_invert+0x6c>
    1068:	ea cf       	rjmp	.-44     	; 0x103e <__ultoa_invert+0x58>
    106a:	b4 e0       	ldi	r27, 0x04	; 4
    106c:	a6 95       	lsr	r26
    106e:	97 95       	ror	r25
    1070:	87 95       	ror	r24
    1072:	77 95       	ror	r23
    1074:	67 95       	ror	r22
    1076:	ba 95       	dec	r27
    1078:	c9 f7       	brne	.-14     	; 0x106c <__ultoa_invert+0x86>
    107a:	00 97       	sbiw	r24, 0x00	; 0
    107c:	61 05       	cpc	r22, r1
    107e:	71 05       	cpc	r23, r1
    1080:	08 95       	ret
    1082:	9b 01       	movw	r18, r22
    1084:	ac 01       	movw	r20, r24
    1086:	0a 2e       	mov	r0, r26
    1088:	06 94       	lsr	r0
    108a:	57 95       	ror	r21
    108c:	47 95       	ror	r20
    108e:	37 95       	ror	r19
    1090:	27 95       	ror	r18
    1092:	ba 95       	dec	r27
    1094:	c9 f7       	brne	.-14     	; 0x1088 <__ultoa_invert+0xa2>
    1096:	62 0f       	add	r22, r18
    1098:	73 1f       	adc	r23, r19
    109a:	84 1f       	adc	r24, r20
    109c:	95 1f       	adc	r25, r21
    109e:	a0 1d       	adc	r26, r0
    10a0:	08 95       	ret

000010a2 <__prologue_saves__>:
    10a2:	2f 92       	push	r2
    10a4:	3f 92       	push	r3
    10a6:	4f 92       	push	r4
    10a8:	5f 92       	push	r5
    10aa:	6f 92       	push	r6
    10ac:	7f 92       	push	r7
    10ae:	8f 92       	push	r8
    10b0:	9f 92       	push	r9
    10b2:	af 92       	push	r10
    10b4:	bf 92       	push	r11
    10b6:	cf 92       	push	r12
    10b8:	df 92       	push	r13
    10ba:	ef 92       	push	r14
    10bc:	ff 92       	push	r15
    10be:	0f 93       	push	r16
    10c0:	1f 93       	push	r17
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	ca 1b       	sub	r28, r26
    10cc:	db 0b       	sbc	r29, r27
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
    10d8:	09 94       	ijmp

000010da <__epilogue_restores__>:
    10da:	2a 88       	ldd	r2, Y+18	; 0x12
    10dc:	39 88       	ldd	r3, Y+17	; 0x11
    10de:	48 88       	ldd	r4, Y+16	; 0x10
    10e0:	5f 84       	ldd	r5, Y+15	; 0x0f
    10e2:	6e 84       	ldd	r6, Y+14	; 0x0e
    10e4:	7d 84       	ldd	r7, Y+13	; 0x0d
    10e6:	8c 84       	ldd	r8, Y+12	; 0x0c
    10e8:	9b 84       	ldd	r9, Y+11	; 0x0b
    10ea:	aa 84       	ldd	r10, Y+10	; 0x0a
    10ec:	b9 84       	ldd	r11, Y+9	; 0x09
    10ee:	c8 84       	ldd	r12, Y+8	; 0x08
    10f0:	df 80       	ldd	r13, Y+7	; 0x07
    10f2:	ee 80       	ldd	r14, Y+6	; 0x06
    10f4:	fd 80       	ldd	r15, Y+5	; 0x05
    10f6:	0c 81       	ldd	r16, Y+4	; 0x04
    10f8:	1b 81       	ldd	r17, Y+3	; 0x03
    10fa:	aa 81       	ldd	r26, Y+2	; 0x02
    10fc:	b9 81       	ldd	r27, Y+1	; 0x01
    10fe:	ce 0f       	add	r28, r30
    1100:	d1 1d       	adc	r29, r1
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	f8 94       	cli
    1106:	de bf       	out	0x3e, r29	; 62
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	cd bf       	out	0x3d, r28	; 61
    110c:	ed 01       	movw	r28, r26
    110e:	08 95       	ret

00001110 <_exit>:
    1110:	f8 94       	cli

00001112 <__stop_program>:
    1112:	ff cf       	rjmp	.-2      	; 0x1112 <__stop_program>
